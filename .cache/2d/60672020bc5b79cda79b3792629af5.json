{"id":"D2nT","dependencies":[{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/package.json","includedInParent":true,"mtime":1637526989355},{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/package.json","includedInParent":true,"mtime":1636600861356},{"name":"../dom-utils/getNodeName.js","loc":{"line":1,"column":24},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/modifiers/applyStyles.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"},{"name":"../dom-utils/instanceOf.js","loc":{"line":2,"column":30},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/modifiers/applyStyles.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"}],"generated":{"js":"var $D2nT$exports = {};\n$parcel$require(\"D2nT\", \"../dom-utils/getNodeName.js\");\n$parcel$require(\"D2nT\", \"../dom-utils/instanceOf.js\");\n\n// This modifier takes the styles prepared by the `computeStyles` modifier\n// and applies them to the HTMLElements such as popper and arrow\nfunction $D2nT$var$applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function (name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name]; // arrow is optional + virtual elements\n\n    if (!$D2nT$import$isHTMLElement(element) || !$D2nT$import$getNodeName(element)) {\n      return;\n    } // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe[cannot-write]\n\n\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function (name) {\n      var value = attributes[name];\n\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n\nfunction $D2nT$var$effect(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n  state.styles = initialStyles;\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return function () {\n    Object.keys(state.elements).forEach(function (name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n      var style = styleProperties.reduce(function (style, property) {\n        style[property] = '';\n        return style;\n      }, {}); // arrow is optional + virtual elements\n\n      if (!$D2nT$import$isHTMLElement(element) || !$D2nT$import$getNodeName(element)) {\n        return;\n      }\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar $D2nT$export$default = {\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: $D2nT$var$applyStyles,\n  effect: $D2nT$var$effect,\n  requires: ['computeStyles']\n};\n$D2nT$exports.default = $D2nT$export$default;"},"sourceMaps":null,"error":null,"hash":"051dcdd80daca4c8882c073cfdacb300","cacheData":{"env":{},"imports":{"$D2nT$import$getNodeName":["../dom-utils/getNodeName.js","default"],"$D2nT$import$isHTMLElement":["../dom-utils/instanceOf.js","isHTMLElement"]},"exports":{"default":"$D2nT$export$default"},"wildcards":[],"sideEffects":false,"isES6Module":true}}