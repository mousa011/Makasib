{"id":"kTjh","dependencies":[{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/package.json","includedInParent":true,"mtime":1637421147719},{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"var $kTjh$exports = {};\nvar $kTjh$var$SINGLE_QUOTE = \"'\".charCodeAt(0);\nvar $kTjh$var$DOUBLE_QUOTE = '\"'.charCodeAt(0);\nvar $kTjh$var$BACKSLASH = '\\\\'.charCodeAt(0);\nvar $kTjh$var$SLASH = '/'.charCodeAt(0);\nvar $kTjh$var$NEWLINE = '\\n'.charCodeAt(0);\nvar $kTjh$var$SPACE = ' '.charCodeAt(0);\nvar $kTjh$var$FEED = '\\f'.charCodeAt(0);\nvar $kTjh$var$TAB = '\\t'.charCodeAt(0);\nvar $kTjh$var$CR = '\\r'.charCodeAt(0);\nvar $kTjh$var$OPEN_SQUARE = '['.charCodeAt(0);\nvar $kTjh$var$CLOSE_SQUARE = ']'.charCodeAt(0);\nvar $kTjh$var$OPEN_PARENTHESES = '('.charCodeAt(0);\nvar $kTjh$var$CLOSE_PARENTHESES = ')'.charCodeAt(0);\nvar $kTjh$var$OPEN_CURLY = '{'.charCodeAt(0);\nvar $kTjh$var$CLOSE_CURLY = '}'.charCodeAt(0);\nvar $kTjh$var$SEMICOLON = ';'.charCodeAt(0);\nvar $kTjh$var$ASTERISK = '*'.charCodeAt(0);\nvar $kTjh$var$COLON = ':'.charCodeAt(0);\nvar $kTjh$var$AT = '@'.charCodeAt(0);\nvar $kTjh$var$RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g;\nvar $kTjh$var$RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g;\nvar $kTjh$var$RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/;\nvar $kTjh$var$RE_HEX_ESCAPE = /[\\da-f]/i;\n\n$kTjh$exports = function tokenizer(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var css = input.css.valueOf();\n  var ignore = options.ignoreErrors;\n  var code, next, quote, content, escape;\n  var escaped, escapePos, prev, n, currentToken;\n  var length = css.length;\n  var pos = 0;\n  var buffer = [];\n  var returned = [];\n\n  function position() {\n    return pos;\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos);\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length;\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop();\n    if (pos >= length) return;\n    var ignoreUnclosed = opts ? opts.ignoreUnclosed : false;\n    code = css.charCodeAt(pos);\n\n    switch (code) {\n      case $kTjh$var$NEWLINE:\n      case $kTjh$var$SPACE:\n      case $kTjh$var$TAB:\n      case $kTjh$var$CR:\n      case $kTjh$var$FEED:\n        {\n          next = pos;\n\n          do {\n            next += 1;\n            code = css.charCodeAt(next);\n          } while (code === $kTjh$var$SPACE || code === $kTjh$var$NEWLINE || code === $kTjh$var$TAB || code === $kTjh$var$CR || code === $kTjh$var$FEED);\n\n          currentToken = ['space', css.slice(pos, next)];\n          pos = next - 1;\n          break;\n        }\n\n      case $kTjh$var$OPEN_SQUARE:\n      case $kTjh$var$CLOSE_SQUARE:\n      case $kTjh$var$OPEN_CURLY:\n      case $kTjh$var$CLOSE_CURLY:\n      case $kTjh$var$COLON:\n      case $kTjh$var$SEMICOLON:\n      case $kTjh$var$CLOSE_PARENTHESES:\n        {\n          var controlChar = String.fromCharCode(code);\n          currentToken = [controlChar, controlChar, pos];\n          break;\n        }\n\n      case $kTjh$var$OPEN_PARENTHESES:\n        {\n          prev = buffer.length ? buffer.pop()[1] : '';\n          n = css.charCodeAt(pos + 1);\n\n          if (prev === 'url' && n !== $kTjh$var$SINGLE_QUOTE && n !== $kTjh$var$DOUBLE_QUOTE && n !== $kTjh$var$SPACE && n !== $kTjh$var$NEWLINE && n !== $kTjh$var$TAB && n !== $kTjh$var$FEED && n !== $kTjh$var$CR) {\n            next = pos;\n\n            do {\n              escaped = false;\n              next = css.indexOf(')', next + 1);\n\n              if (next === -1) {\n                if (ignore || ignoreUnclosed) {\n                  next = pos;\n                  break;\n                } else {\n                  unclosed('bracket');\n                }\n              }\n\n              escapePos = next;\n\n              while (css.charCodeAt(escapePos - 1) === $kTjh$var$BACKSLASH) {\n                escapePos -= 1;\n                escaped = !escaped;\n              }\n            } while (escaped);\n\n            currentToken = ['brackets', css.slice(pos, next + 1), pos, next];\n            pos = next;\n          } else {\n            next = css.indexOf(')', pos + 1);\n            content = css.slice(pos, next + 1);\n\n            if (next === -1 || $kTjh$var$RE_BAD_BRACKET.test(content)) {\n              currentToken = ['(', '(', pos];\n            } else {\n              currentToken = ['brackets', content, pos, next];\n              pos = next;\n            }\n          }\n\n          break;\n        }\n\n      case $kTjh$var$SINGLE_QUOTE:\n      case $kTjh$var$DOUBLE_QUOTE:\n        {\n          quote = code === $kTjh$var$SINGLE_QUOTE ? \"'\" : '\"';\n          next = pos;\n\n          do {\n            escaped = false;\n            next = css.indexOf(quote, next + 1);\n\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos + 1;\n                break;\n              } else {\n                unclosed('string');\n              }\n            }\n\n            escapePos = next;\n\n            while (css.charCodeAt(escapePos - 1) === $kTjh$var$BACKSLASH) {\n              escapePos -= 1;\n              escaped = !escaped;\n            }\n          } while (escaped);\n\n          currentToken = ['string', css.slice(pos, next + 1), pos, next];\n          pos = next;\n          break;\n        }\n\n      case $kTjh$var$AT:\n        {\n          $kTjh$var$RE_AT_END.lastIndex = pos + 1;\n          $kTjh$var$RE_AT_END.test(css);\n\n          if ($kTjh$var$RE_AT_END.lastIndex === 0) {\n            next = css.length - 1;\n          } else {\n            next = $kTjh$var$RE_AT_END.lastIndex - 2;\n          }\n\n          currentToken = ['at-word', css.slice(pos, next + 1), pos, next];\n          pos = next;\n          break;\n        }\n\n      case $kTjh$var$BACKSLASH:\n        {\n          next = pos;\n          escape = true;\n\n          while (css.charCodeAt(next + 1) === $kTjh$var$BACKSLASH) {\n            next += 1;\n            escape = !escape;\n          }\n\n          code = css.charCodeAt(next + 1);\n\n          if (escape && code !== $kTjh$var$SLASH && code !== $kTjh$var$SPACE && code !== $kTjh$var$NEWLINE && code !== $kTjh$var$TAB && code !== $kTjh$var$CR && code !== $kTjh$var$FEED) {\n            next += 1;\n\n            if ($kTjh$var$RE_HEX_ESCAPE.test(css.charAt(next))) {\n              while ($kTjh$var$RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n                next += 1;\n              }\n\n              if (css.charCodeAt(next + 1) === $kTjh$var$SPACE) {\n                next += 1;\n              }\n            }\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next];\n          pos = next;\n          break;\n        }\n\n      default:\n        {\n          if (code === $kTjh$var$SLASH && css.charCodeAt(pos + 1) === $kTjh$var$ASTERISK) {\n            next = css.indexOf('*/', pos + 2) + 1;\n\n            if (next === 0) {\n              if (ignore || ignoreUnclosed) {\n                next = css.length;\n              } else {\n                unclosed('comment');\n              }\n            }\n\n            currentToken = ['comment', css.slice(pos, next + 1), pos, next];\n            pos = next;\n          } else {\n            $kTjh$var$RE_WORD_END.lastIndex = pos + 1;\n            $kTjh$var$RE_WORD_END.test(css);\n\n            if ($kTjh$var$RE_WORD_END.lastIndex === 0) {\n              next = css.length - 1;\n            } else {\n              next = $kTjh$var$RE_WORD_END.lastIndex - 2;\n            }\n\n            currentToken = ['word', css.slice(pos, next + 1), pos, next];\n            buffer.push(currentToken);\n            pos = next;\n          }\n\n          break;\n        }\n    }\n\n    pos++;\n    return currentToken;\n  }\n\n  function back(token) {\n    returned.push(token);\n  }\n\n  return {\n    back: back,\n    nextToken: nextToken,\n    endOfFile: endOfFile,\n    position: position\n  };\n};"},"sourceMaps":null,"error":null,"hash":"c2d6a8295d54457d37a1c9c1dc9c36aa","cacheData":{"env":{},"imports":{},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}