{"id":"Mqj1","dependencies":[{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/package.json","includedInParent":true,"mtime":1637421147719},{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/package.json","includedInParent":true,"mtime":499162500000},{"name":"./symbols","loc":{"line":3,"column":30},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/container.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/symbols.js"},{"name":"./declaration","loc":{"line":4,"column":26},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/container.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/declaration.js"},{"name":"./comment","loc":{"line":5,"column":22},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/container.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/comment.js"},{"name":"./node","loc":{"line":6,"column":19},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/container.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/node.js"}],"generated":{"js":"var $Mqj1$exports = {};\n\nfunction $Mqj1$var$_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { $Mqj1$var$_typeof = function _typeof(obj) { return typeof obj; }; } else { $Mqj1$var$_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return $Mqj1$var$_typeof(obj); }\n\nfunction $Mqj1$var$_toConsumableArray(arr) { return $Mqj1$var$_arrayWithoutHoles(arr) || $Mqj1$var$_iterableToArray(arr) || $Mqj1$var$_unsupportedIterableToArray(arr) || $Mqj1$var$_nonIterableSpread(); }\n\nfunction $Mqj1$var$_nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction $Mqj1$var$_iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction $Mqj1$var$_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return $Mqj1$var$_arrayLikeToArray(arr); }\n\nfunction $Mqj1$var$_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction $Mqj1$var$_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction $Mqj1$var$_createClass(Constructor, protoProps, staticProps) { if (protoProps) $Mqj1$var$_defineProperties(Constructor.prototype, protoProps); if (staticProps) $Mqj1$var$_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction $Mqj1$var$_get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { $Mqj1$var$_get = Reflect.get; } else { $Mqj1$var$_get = function _get(target, property, receiver) { var base = $Mqj1$var$_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return $Mqj1$var$_get(target, property, receiver || target); }\n\nfunction $Mqj1$var$_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = $Mqj1$var$_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction $Mqj1$var$_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) $Mqj1$var$_setPrototypeOf(subClass, superClass); }\n\nfunction $Mqj1$var$_setPrototypeOf(o, p) { $Mqj1$var$_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return $Mqj1$var$_setPrototypeOf(o, p); }\n\nfunction $Mqj1$var$_createSuper(Derived) { var hasNativeReflectConstruct = $Mqj1$var$_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = $Mqj1$var$_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = $Mqj1$var$_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return $Mqj1$var$_possibleConstructorReturn(this, result); }; }\n\nfunction $Mqj1$var$_possibleConstructorReturn(self, call) { if (call && ($Mqj1$var$_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return $Mqj1$var$_assertThisInitialized(self); }\n\nfunction $Mqj1$var$_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction $Mqj1$var$_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction $Mqj1$var$_getPrototypeOf(o) { $Mqj1$var$_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return $Mqj1$var$_getPrototypeOf(o); }\n\nfunction $Mqj1$var$_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = $Mqj1$var$_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction $Mqj1$var$_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return $Mqj1$var$_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return $Mqj1$var$_arrayLikeToArray(o, minLen); }\n\nfunction $Mqj1$var$_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar $Mqj1$var$_require = $parcel$require(\"Mqj1\", \"./symbols\"),\n    $Mqj1$var$isClean = $Mqj1$var$_require.isClean,\n    $Mqj1$var$my = $Mqj1$var$_require.my;\nvar $Mqj1$var$Declaration = $parcel$require(\"Mqj1\", \"./declaration\");\nvar $Mqj1$var$Comment = $parcel$require(\"Mqj1\", \"./comment\");\nvar $Mqj1$var$Node = $parcel$require(\"Mqj1\", \"./node\");\nvar $Mqj1$var$parse, $Mqj1$var$Rule, $Mqj1$var$AtRule;\n\nfunction $Mqj1$var$cleanSource(nodes) {\n  return nodes.map(function (i) {\n    if (i.nodes) i.nodes = $Mqj1$var$cleanSource(i.nodes);\n    delete i.source;\n    return i;\n  });\n}\n\nfunction $Mqj1$var$markDirtyUp(node) {\n  node[$Mqj1$var$isClean] = false;\n\n  if (node.proxyOf.nodes) {\n    var _iterator = $Mqj1$var$_createForOfIteratorHelper(node.proxyOf.nodes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var i = _step.value;\n        $Mqj1$var$markDirtyUp(i);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n}\n\nvar $Mqj1$var$Container = /*#__PURE__*/function (_Node) {\n  $Mqj1$var$_inherits(Container, _Node);\n\n  var _super = $Mqj1$var$_createSuper(Container);\n\n  function Container() {\n    $Mqj1$var$_classCallCheck(this, Container);\n    return _super.apply(this, arguments);\n  }\n\n  $Mqj1$var$_createClass(Container, [{\n    key: \"push\",\n    value: function push(child) {\n      child.parent = this;\n      this.proxyOf.nodes.push(child);\n      return this;\n    }\n  }, {\n    key: \"each\",\n    value: function each(callback) {\n      if (!this.proxyOf.nodes) return undefined;\n      var iterator = this.getIterator();\n      var index, result;\n\n      while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n        index = this.indexes[iterator];\n        result = callback(this.proxyOf.nodes[index], index);\n        if (result === false) break;\n        this.indexes[iterator] += 1;\n      }\n\n      delete this.indexes[iterator];\n      return result;\n    }\n  }, {\n    key: \"walk\",\n    value: function walk(callback) {\n      return this.each(function (child, i) {\n        var result;\n\n        try {\n          result = callback(child, i);\n        } catch (e) {\n          throw child.addToError(e);\n        }\n\n        if (result !== false && child.walk) {\n          result = child.walk(callback);\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"walkDecls\",\n    value: function walkDecls(prop, callback) {\n      if (!callback) {\n        callback = prop;\n        return this.walk(function (child, i) {\n          if (child.type === 'decl') {\n            return callback(child, i);\n          }\n        });\n      }\n\n      if (prop instanceof RegExp) {\n        return this.walk(function (child, i) {\n          if (child.type === 'decl' && prop.test(child.prop)) {\n            return callback(child, i);\n          }\n        });\n      }\n\n      return this.walk(function (child, i) {\n        if (child.type === 'decl' && child.prop === prop) {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"walkRules\",\n    value: function walkRules(selector, callback) {\n      if (!callback) {\n        callback = selector;\n        return this.walk(function (child, i) {\n          if (child.type === 'rule') {\n            return callback(child, i);\n          }\n        });\n      }\n\n      if (selector instanceof RegExp) {\n        return this.walk(function (child, i) {\n          if (child.type === 'rule' && selector.test(child.selector)) {\n            return callback(child, i);\n          }\n        });\n      }\n\n      return this.walk(function (child, i) {\n        if (child.type === 'rule' && child.selector === selector) {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"walkAtRules\",\n    value: function walkAtRules(name, callback) {\n      if (!callback) {\n        callback = name;\n        return this.walk(function (child, i) {\n          if (child.type === 'atrule') {\n            return callback(child, i);\n          }\n        });\n      }\n\n      if (name instanceof RegExp) {\n        return this.walk(function (child, i) {\n          if (child.type === 'atrule' && name.test(child.name)) {\n            return callback(child, i);\n          }\n        });\n      }\n\n      return this.walk(function (child, i) {\n        if (child.type === 'atrule' && child.name === name) {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"walkComments\",\n    value: function walkComments(callback) {\n      return this.walk(function (child, i) {\n        if (child.type === 'comment') {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"append\",\n    value: function append() {\n      for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {\n        children[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _children = children; _i < _children.length; _i++) {\n        var child = _children[_i];\n        var nodes = this.normalize(child, this.last);\n\n        var _iterator2 = $Mqj1$var$_createForOfIteratorHelper(nodes),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var node = _step2.value;\n            this.proxyOf.nodes.push(node);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend() {\n      for (var _len2 = arguments.length, children = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        children[_key2] = arguments[_key2];\n      }\n\n      children = children.reverse();\n\n      var _iterator3 = $Mqj1$var$_createForOfIteratorHelper(children),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var child = _step3.value;\n          var nodes = this.normalize(child, this.first, 'prepend').reverse();\n\n          var _iterator4 = $Mqj1$var$_createForOfIteratorHelper(nodes),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var node = _step4.value;\n              this.proxyOf.nodes.unshift(node);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n\n          for (var id in this.indexes) {\n            this.indexes[id] = this.indexes[id] + nodes.length;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"cleanRaws\",\n    value: function cleanRaws(keepBetween) {\n      $Mqj1$var$_get($Mqj1$var$_getPrototypeOf(Container.prototype), \"cleanRaws\", this).call(this, keepBetween);\n\n      if (this.nodes) {\n        var _iterator5 = $Mqj1$var$_createForOfIteratorHelper(this.nodes),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var node = _step5.value;\n            node.cleanRaws(keepBetween);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(exist, add) {\n      exist = this.index(exist);\n      var type = exist === 0 ? 'prepend' : false;\n      var nodes = this.normalize(add, this.proxyOf.nodes[exist], type).reverse();\n\n      var _iterator6 = $Mqj1$var$_createForOfIteratorHelper(nodes),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var node = _step6.value;\n          this.proxyOf.nodes.splice(exist, 0, node);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var index;\n\n      for (var id in this.indexes) {\n        index = this.indexes[id];\n\n        if (exist <= index) {\n          this.indexes[id] = index + nodes.length;\n        }\n      }\n\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(exist, add) {\n      exist = this.index(exist);\n      var nodes = this.normalize(add, this.proxyOf.nodes[exist]).reverse();\n\n      var _iterator7 = $Mqj1$var$_createForOfIteratorHelper(nodes),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var node = _step7.value;\n          this.proxyOf.nodes.splice(exist + 1, 0, node);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      var index;\n\n      for (var id in this.indexes) {\n        index = this.indexes[id];\n\n        if (exist < index) {\n          this.indexes[id] = index + nodes.length;\n        }\n      }\n\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(child) {\n      child = this.index(child);\n      this.proxyOf.nodes[child].parent = undefined;\n      this.proxyOf.nodes.splice(child, 1);\n      var index;\n\n      for (var id in this.indexes) {\n        index = this.indexes[id];\n\n        if (index >= child) {\n          this.indexes[id] = index - 1;\n        }\n      }\n\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var _iterator8 = $Mqj1$var$_createForOfIteratorHelper(this.proxyOf.nodes),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var node = _step8.value;\n          node.parent = undefined;\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      this.proxyOf.nodes = [];\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"replaceValues\",\n    value: function replaceValues(pattern, opts, callback) {\n      if (!callback) {\n        callback = opts;\n        opts = {};\n      }\n\n      this.walkDecls(function (decl) {\n        if (opts.props && !opts.props.includes(decl.prop)) return;\n        if (opts.fast && !decl.value.includes(opts.fast)) return;\n        decl.value = decl.value.replace(pattern, callback);\n      });\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"every\",\n    value: function every(condition) {\n      return this.nodes.every(condition);\n    }\n  }, {\n    key: \"some\",\n    value: function some(condition) {\n      return this.nodes.some(condition);\n    }\n  }, {\n    key: \"index\",\n    value: function index(child) {\n      if (typeof child === 'number') return child;\n      if (child.proxyOf) child = child.proxyOf;\n      return this.proxyOf.nodes.indexOf(child);\n    }\n  }, {\n    key: \"first\",\n    get: function get() {\n      if (!this.proxyOf.nodes) return undefined;\n      return this.proxyOf.nodes[0];\n    }\n  }, {\n    key: \"last\",\n    get: function get() {\n      if (!this.proxyOf.nodes) return undefined;\n      return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(nodes, sample) {\n      var _this = this;\n\n      if (typeof nodes === 'string') {\n        nodes = $Mqj1$var$cleanSource($Mqj1$var$parse(nodes).nodes);\n      } else if (Array.isArray(nodes)) {\n        nodes = nodes.slice(0);\n\n        var _iterator9 = $Mqj1$var$_createForOfIteratorHelper(nodes),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var i = _step9.value;\n            if (i.parent) i.parent.removeChild(i, 'ignore');\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      } else if (nodes.type === 'root' && this.type !== 'document') {\n        nodes = nodes.nodes.slice(0);\n\n        var _iterator10 = $Mqj1$var$_createForOfIteratorHelper(nodes),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var _i2 = _step10.value;\n            if (_i2.parent) _i2.parent.removeChild(_i2, 'ignore');\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      } else if (nodes.type) {\n        nodes = [nodes];\n      } else if (nodes.prop) {\n        if (typeof nodes.value === 'undefined') {\n          throw new Error('Value field is missed in node creation');\n        } else if (typeof nodes.value !== 'string') {\n          nodes.value = String(nodes.value);\n        }\n\n        nodes = [new $Mqj1$var$Declaration(nodes)];\n      } else if (nodes.selector) {\n        nodes = [new $Mqj1$var$Rule(nodes)];\n      } else if (nodes.name) {\n        nodes = [new $Mqj1$var$AtRule(nodes)];\n      } else if (nodes.text) {\n        nodes = [new $Mqj1$var$Comment(nodes)];\n      } else {\n        throw new Error('Unknown node type in node creation');\n      }\n\n      var processed = nodes.map(function (i) {\n        // istanbul ignore next\n        if (!i[$Mqj1$var$my]) Container.rebuild(i);\n        i = i.proxyOf;\n        if (i.parent) i.parent.removeChild(i);\n        if (i[$Mqj1$var$isClean]) $Mqj1$var$markDirtyUp(i);\n\n        if (typeof i.raws.before === 'undefined') {\n          if (sample && typeof sample.raws.before !== 'undefined') {\n            i.raws.before = sample.raws.before.replace(/\\S/g, '');\n          }\n        }\n\n        i.parent = _this;\n        return i;\n      });\n      return processed;\n    }\n  }, {\n    key: \"getProxyProcessor\",\n    value: function getProxyProcessor() {\n      return {\n        set: function set(node, prop, value) {\n          if (node[prop] === value) return true;\n          node[prop] = value;\n\n          if (prop === 'name' || prop === 'params' || prop === 'selector') {\n            node.markDirty();\n          }\n\n          return true;\n        },\n        get: function get(node, prop) {\n          if (prop === 'proxyOf') {\n            return node;\n          } else if (!node[prop]) {\n            return node[prop];\n          } else if (prop === 'each' || typeof prop === 'string' && prop.startsWith('walk')) {\n            return function () {\n              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                args[_key3] = arguments[_key3];\n              }\n\n              return node[prop].apply(node, $Mqj1$var$_toConsumableArray(args.map(function (i) {\n                if (typeof i === 'function') {\n                  return function (child, index) {\n                    return i(child.toProxy(), index);\n                  };\n                } else {\n                  return i;\n                }\n              })));\n            };\n          } else if (prop === 'every' || prop === 'some') {\n            return function (cb) {\n              return node[prop](function (child) {\n                for (var _len4 = arguments.length, other = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n                  other[_key4 - 1] = arguments[_key4];\n                }\n\n                return cb.apply(void 0, [child.toProxy()].concat(other));\n              });\n            };\n          } else if (prop === 'root') {\n            return function () {\n              return node.root().toProxy();\n            };\n          } else if (prop === 'nodes') {\n            return node.nodes.map(function (i) {\n              return i.toProxy();\n            });\n          } else if (prop === 'first' || prop === 'last') {\n            return node[prop].toProxy();\n          } else {\n            return node[prop];\n          }\n        }\n      };\n    }\n  }, {\n    key: \"getIterator\",\n    value: function getIterator() {\n      if (!this.lastEach) this.lastEach = 0;\n      if (!this.indexes) this.indexes = {};\n      this.lastEach += 1;\n      var iterator = this.lastEach;\n      this.indexes[iterator] = 0;\n      return iterator;\n    }\n  }]);\n  return Container;\n}($Mqj1$var$Node);\n\n$Mqj1$var$Container.registerParse = function (dependant) {\n  $Mqj1$var$parse = dependant;\n};\n\n$Mqj1$var$Container.registerRule = function (dependant) {\n  $Mqj1$var$Rule = dependant;\n};\n\n$Mqj1$var$Container.registerAtRule = function (dependant) {\n  $Mqj1$var$AtRule = dependant;\n};\n\n$Mqj1$exports = $Mqj1$var$Container;\n$Mqj1$var$Container.default = $Mqj1$var$Container; // istanbul ignore next\n\n$Mqj1$var$Container.rebuild = function (node) {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, $Mqj1$var$AtRule.prototype);\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, $Mqj1$var$Rule.prototype);\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, $Mqj1$var$Declaration.prototype);\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, $Mqj1$var$Comment.prototype);\n  }\n\n  node[$Mqj1$var$my] = true;\n\n  if (node.nodes) {\n    node.nodes.forEach(function (child) {\n      $Mqj1$var$Container.rebuild(child);\n    });\n  }\n};"},"sourceMaps":null,"error":null,"hash":"6a19b792d8b773a09f4dc07b0e27989d","cacheData":{"env":{},"imports":{"$require$./symbols":["./symbols","*"],"$require$./declaration":["./declaration","*"],"$require$./comment":["./comment","*"],"$require$./node":["./node","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}