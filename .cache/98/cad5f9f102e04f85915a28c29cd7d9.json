{"id":"KnUB","dependencies":[{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/package.json","includedInParent":true,"mtime":1637421147719},{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/rtlcss/package.json","includedInParent":true,"mtime":499162500000},{"name":"./plugin.js","loc":{"line":5,"column":27},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/rtlcss/lib/config.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/rtlcss/lib/plugin.js"}],"generated":{"js":"var $KnUB$exports = {};\nlet $KnUB$var$options;\nconst $KnUB$var$config = {};\nconst $KnUB$var$corePlugin = $parcel$require(\"KnUB\", \"./plugin.js\");\n\nfunction $KnUB$var$sort(arr) {\n  return arr.sort((a, b) => a.priority - b.priority);\n}\n\nfunction $KnUB$var$optionOrDefault(option, def) {\n  return option in $KnUB$var$options ? $KnUB$var$options[option] : def;\n}\n\nfunction $KnUB$var$addKey(key, def) {\n  $KnUB$var$config[key] = $KnUB$var$optionOrDefault(key, def);\n}\n\nfunction $KnUB$var$main(opts, plugins, hooks) {\n  $KnUB$var$options = opts || {};\n  hooks = hooks || {};\n  $KnUB$var$addKey('autoRename', false);\n  $KnUB$var$addKey('autoRenameStrict', false);\n  $KnUB$var$addKey('blacklist', {});\n  $KnUB$var$addKey('clean', true);\n  $KnUB$var$addKey('greedy', false);\n  $KnUB$var$addKey('processUrls', false);\n  $KnUB$var$addKey('stringMap', []);\n  $KnUB$var$addKey('useCalc', false);\n  $KnUB$var$addKey('aliases', {});\n  $KnUB$var$addKey('processEnv', true); // default strings map\n\n  if (Array.isArray($KnUB$var$config.stringMap)) {\n    let hasLeftRight, hasLtrRtl;\n\n    for (const map of $KnUB$var$config.stringMap) {\n      if (hasLeftRight && hasLtrRtl) {\n        break;\n      } else if (map.name === 'left-right') {\n        hasLeftRight = true;\n      } else if (map.name === 'ltr-rtl') {\n        hasLtrRtl = true;\n      }\n    }\n\n    if (!hasLeftRight) {\n      $KnUB$var$config.stringMap.push({\n        name: 'left-right',\n        priority: 100,\n        exclusive: false,\n        search: ['left', 'Left', 'LEFT'],\n        replace: ['right', 'Right', 'RIGHT'],\n        options: {\n          scope: '*',\n          ignoreCase: false\n        }\n      });\n    }\n\n    if (!hasLtrRtl) {\n      $KnUB$var$config.stringMap.push({\n        name: 'ltr-rtl',\n        priority: 100,\n        exclusive: false,\n        search: ['ltr', 'Ltr', 'LTR'],\n        replace: ['rtl', 'Rtl', 'RTL'],\n        options: {\n          scope: '*',\n          ignoreCase: false\n        }\n      });\n    }\n\n    $KnUB$var$sort($KnUB$var$config.stringMap);\n  } // plugins\n\n\n  $KnUB$var$config.plugins = [];\n\n  if (Array.isArray(plugins)) {\n    if (!plugins.some(plugin => plugin.name === 'rtlcss')) {\n      $KnUB$var$config.plugins.push($KnUB$var$corePlugin);\n    }\n\n    $KnUB$var$config.plugins = $KnUB$var$config.plugins.concat(plugins);\n  } else if (!plugins || plugins.name !== 'rtlcss') {\n    $KnUB$var$config.plugins.push($KnUB$var$corePlugin);\n  }\n\n  $KnUB$var$sort($KnUB$var$config.plugins); // hooks\n\n  $KnUB$var$config.hooks = {\n    pre() {},\n\n    post() {}\n\n  };\n\n  if (typeof hooks.pre === 'function') {\n    $KnUB$var$config.hooks.pre = hooks.pre;\n  }\n\n  if (typeof hooks.post === 'function') {\n    $KnUB$var$config.hooks.post = hooks.post;\n  }\n\n  return $KnUB$var$config;\n}\n\n$KnUB$exports.configure = $KnUB$var$main;"},"sourceMaps":null,"error":null,"hash":"b2719b03fcbd8ea921f4ca7137d47e01","cacheData":{"env":{},"imports":{"$require$./plugin.js":["./plugin.js","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}