{"id":"Moke","dependencies":[{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/package.json","includedInParent":true,"mtime":1637526989355},{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/package.json","includedInParent":true,"mtime":1636600861356},{"name":"../dom-utils/getClippingRect.js","loc":{"line":1,"column":28},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/utils/detectOverflow.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js"},{"name":"../dom-utils/getDocumentElement.js","loc":{"line":2,"column":31},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/utils/detectOverflow.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"},{"name":"../dom-utils/getBoundingClientRect.js","loc":{"line":3,"column":34},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/utils/detectOverflow.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"},{"name":"./computeOffsets.js","loc":{"line":4,"column":27},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/utils/detectOverflow.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/utils/computeOffsets.js"},{"name":"./rectToClientRect.js","loc":{"line":5,"column":29},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/utils/detectOverflow.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/utils/rectToClientRect.js"},{"name":"../enums.js","loc":{"line":6,"column":97},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/utils/detectOverflow.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/enums.js"},{"name":"../dom-utils/instanceOf.js","loc":{"line":7,"column":26},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/utils/detectOverflow.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"},{"name":"./mergePaddingObject.js","loc":{"line":8,"column":31},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/utils/detectOverflow.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js"},{"name":"./expandToHashMap.js","loc":{"line":9,"column":28},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/utils/detectOverflow.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/utils/expandToHashMap.js"}],"generated":{"js":"var $Moke$exports = {};\n$parcel$require(\"Moke\", \"../dom-utils/getClippingRect.js\");\n$parcel$require(\"Moke\", \"../dom-utils/getDocumentElement.js\");\n$parcel$require(\"Moke\", \"../dom-utils/getBoundingClientRect.js\");\n$parcel$require(\"Moke\", \"./computeOffsets.js\");\n$parcel$require(\"Moke\", \"./rectToClientRect.js\");\n$parcel$require(\"Moke\", \"../enums.js\");\n$parcel$require(\"Moke\", \"../dom-utils/instanceOf.js\");\n$parcel$require(\"Moke\", \"./mergePaddingObject.js\");\n$parcel$require(\"Moke\", \"./expandToHashMap.js\");\n\n// eslint-disable-next-line import/no-unused-modules\nfunction $Moke$export$default(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$placement = _options.placement,\n      placement = _options$placement === void 0 ? state.placement : _options$placement,\n      _options$boundary = _options.boundary,\n      boundary = _options$boundary === void 0 ? $Moke$import$clippingParents : _options$boundary,\n      _options$rootBoundary = _options.rootBoundary,\n      rootBoundary = _options$rootBoundary === void 0 ? $Moke$import$viewport : _options$rootBoundary,\n      _options$elementConte = _options.elementContext,\n      elementContext = _options$elementConte === void 0 ? $Moke$import$popper : _options$elementConte,\n      _options$altBoundary = _options.altBoundary,\n      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n      _options$padding = _options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = $Moke$import$mergePaddingObject(typeof padding !== 'number' ? padding : $Moke$import$expandToHashMap(padding, $Moke$import$basePlacements));\n  var altContext = elementContext === $Moke$import$popper ? $Moke$import$reference : $Moke$import$popper;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = $Moke$import$getClippingRect($Moke$import$isElement(element) ? element : element.contextElement || $Moke$import$getDocumentElement(state.elements.popper), boundary, rootBoundary);\n  var referenceClientRect = $Moke$import$getBoundingClientRect(state.elements.reference);\n  var popperOffsets = $Moke$import$computeOffsets({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: 'absolute',\n    placement: placement\n  });\n  var popperClientRect = $Moke$import$rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n  var elementClientRect = elementContext === $Moke$import$popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n  if (elementContext === $Moke$import$popper && offsetData) {\n    var offset = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function (key) {\n      var multiply = [$Moke$import$right, $Moke$import$bottom].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [$Moke$import$top, $Moke$import$bottom].indexOf(key) >= 0 ? 'y' : 'x';\n      overflowOffsets[key] += offset[axis] * multiply;\n    });\n  }\n\n  return overflowOffsets;\n}\n\n$Moke$exports.default = $Moke$export$default;"},"sourceMaps":null,"error":null,"hash":"e2321cb2ed30c11bc96041888bfb6b3f","cacheData":{"env":{},"imports":{"$Moke$import$getClippingRect":["../dom-utils/getClippingRect.js","default"],"$Moke$import$getDocumentElement":["../dom-utils/getDocumentElement.js","default"],"$Moke$import$getBoundingClientRect":["../dom-utils/getBoundingClientRect.js","default"],"$Moke$import$computeOffsets":["./computeOffsets.js","default"],"$Moke$import$rectToClientRect":["./rectToClientRect.js","default"],"$Moke$import$clippingParents":["../enums.js","clippingParents"],"$Moke$import$reference":["../enums.js","reference"],"$Moke$import$popper":["../enums.js","popper"],"$Moke$import$bottom":["../enums.js","bottom"],"$Moke$import$top":["../enums.js","top"],"$Moke$import$right":["../enums.js","right"],"$Moke$import$basePlacements":["../enums.js","basePlacements"],"$Moke$import$viewport":["../enums.js","viewport"],"$Moke$import$isElement":["../dom-utils/instanceOf.js","isElement"],"$Moke$import$mergePaddingObject":["./mergePaddingObject.js","default"],"$Moke$import$expandToHashMap":["./expandToHashMap.js","default"]},"exports":{"default":"$Moke$export$default"},"wildcards":[],"sideEffects":false,"isES6Module":true}}