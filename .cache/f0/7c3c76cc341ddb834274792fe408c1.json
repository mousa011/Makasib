{"id":"SXBB","dependencies":[{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/package.json","includedInParent":true,"mtime":1637421147719},{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/rtlcss/package.json","includedInParent":true,"mtime":499162500000},{"name":"./directive-parser.js","loc":{"line":3,"column":32},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/rtlcss/lib/state.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/rtlcss/lib/directive-parser.js"}],"generated":{"js":"var $SXBB$exports = {};\nconst $SXBB$var$directiveParser = $parcel$require(\"SXBB\", \"./directive-parser.js\");\n$SXBB$exports = {\n  stack: [],\n\n  pop(current) {\n    const index = this.stack.indexOf(current);\n\n    if (index !== -1) {\n      this.stack.splice(index, 1);\n    }\n\n    if (!current.preserve) {\n      current.source.remove();\n    }\n  },\n\n  parse(node, lazyResult, callback) {\n    let current;\n    const metadata = $SXBB$var$directiveParser(node);\n\n    if (metadata) {\n      if (!metadata.begin && metadata.end) {\n        this.walk(item => {\n          if (metadata.name === item.metadata.name) {\n            this.pop(item);\n            current = {\n              metadata,\n              directive: item.directive,\n              source: node,\n              preserve: item.preserve\n            };\n            return false;\n          }\n        });\n      } else {\n        current = {\n          metadata,\n          directive: null,\n          source: node,\n          preserve: null\n        };\n      }\n\n      if (current === undefined) {\n        lazyResult.warn(`found end \"${metadata.name}\" without a matching begin.`, {\n          node: node\n        });\n      } else if (callback(current)) {\n        this.stack.push(current);\n      } else if (!current.preserve) {\n        current.source.remove();\n      }\n    }\n  },\n\n  walk(callback) {\n    let len = this.stack.length;\n\n    while (--len > -1) {\n      if (!callback(this.stack[len])) {\n        break;\n      }\n    }\n  }\n\n};"},"sourceMaps":null,"error":null,"hash":"5b0b84c246c42a95d2945767e9f609a3","cacheData":{"env":{},"imports":{"$require$./directive-parser.js":["./directive-parser.js","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}