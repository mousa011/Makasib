{"id":"xqrD","dependencies":[{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/package.json","includedInParent":true,"mtime":1637526989355},{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/bootstrap/package.json","includedInParent":true,"mtime":1636600861887},{"name":"@popperjs/core","loc":{"line":6,"column":24},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/bootstrap/dist/js/bootstrap.esm.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/@popperjs/core/lib/index.js"}],"generated":{"js":"var $xqrD$exports = {};\n$parcel$require(\"xqrD\", \"@popperjs/core\");\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): util/index.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nconst $xqrD$var$MAX_UID = 1000000;\nconst $xqrD$var$MILLISECONDS_MULTIPLIER = 1000;\nconst $xqrD$var$TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)\n\nconst $xqrD$var$toType = obj => {\n  if (obj === null || obj === undefined) {\n    return `${obj}`;\n  }\n\n  return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase();\n};\n/**\n * --------------------------------------------------------------------------\n * Public Util Api\n * --------------------------------------------------------------------------\n */\n\n\nconst $xqrD$var$getUID = prefix => {\n  do {\n    prefix += Math.floor(Math.random() * $xqrD$var$MAX_UID);\n  } while (document.getElementById(prefix));\n\n  return prefix;\n};\n\nconst $xqrD$var$getSelector = element => {\n  let selector = element.getAttribute('data-bs-target');\n\n  if (!selector || selector === '#') {\n    let hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,\n    // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n    // `document.querySelector` will rightfully complain it is invalid.\n    // See https://github.com/twbs/bootstrap/issues/32273\n\n    if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) {\n      return null;\n    } // Just in case some CMS puts out a full URL with the anchor appended\n\n\n    if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {\n      hrefAttr = `#${hrefAttr.split('#')[1]}`;\n    }\n\n    selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;\n  }\n\n  return selector;\n};\n\nconst $xqrD$var$getSelectorFromElement = element => {\n  const selector = $xqrD$var$getSelector(element);\n\n  if (selector) {\n    return document.querySelector(selector) ? selector : null;\n  }\n\n  return null;\n};\n\nconst $xqrD$var$getElementFromSelector = element => {\n  const selector = $xqrD$var$getSelector(element);\n  return selector ? document.querySelector(selector) : null;\n};\n\nconst $xqrD$var$getTransitionDurationFromElement = element => {\n  if (!element) {\n    return 0;\n  } // Get transition-duration of the element\n\n\n  let {\n    transitionDuration,\n    transitionDelay\n  } = window.getComputedStyle(element);\n  const floatTransitionDuration = Number.parseFloat(transitionDuration);\n  const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found\n\n  if (!floatTransitionDuration && !floatTransitionDelay) {\n    return 0;\n  } // If multiple durations are defined, take the first\n\n\n  transitionDuration = transitionDuration.split(',')[0];\n  transitionDelay = transitionDelay.split(',')[0];\n  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * $xqrD$var$MILLISECONDS_MULTIPLIER;\n};\n\nconst $xqrD$var$triggerTransitionEnd = element => {\n  element.dispatchEvent(new Event($xqrD$var$TRANSITION_END));\n};\n\nconst $xqrD$var$isElement = obj => {\n  if (!obj || typeof obj !== 'object') {\n    return false;\n  }\n\n  if (typeof obj.jquery !== 'undefined') {\n    obj = obj[0];\n  }\n\n  return typeof obj.nodeType !== 'undefined';\n};\n\nconst $xqrD$var$getElement = obj => {\n  if ($xqrD$var$isElement(obj)) {\n    // it's a jQuery object or a node element\n    return obj.jquery ? obj[0] : obj;\n  }\n\n  if (typeof obj === 'string' && obj.length > 0) {\n    return document.querySelector(obj);\n  }\n\n  return null;\n};\n\nconst $xqrD$var$typeCheckConfig = (componentName, config, configTypes) => {\n  Object.keys(configTypes).forEach(property => {\n    const expectedTypes = configTypes[property];\n    const value = config[property];\n    const valueType = value && $xqrD$var$isElement(value) ? 'element' : $xqrD$var$toType(value);\n\n    if (!new RegExp(expectedTypes).test(valueType)) {\n      throw new TypeError(`${componentName.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`);\n    }\n  });\n};\n\nconst $xqrD$var$isVisible = element => {\n  if (!$xqrD$var$isElement(element) || element.getClientRects().length === 0) {\n    return false;\n  }\n\n  return getComputedStyle(element).getPropertyValue('visibility') === 'visible';\n};\n\nconst $xqrD$var$isDisabled = element => {\n  if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n    return true;\n  }\n\n  if (element.classList.contains('disabled')) {\n    return true;\n  }\n\n  if (typeof element.disabled !== 'undefined') {\n    return element.disabled;\n  }\n\n  return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';\n};\n\nconst $xqrD$var$findShadowRoot = element => {\n  if (!document.documentElement.attachShadow) {\n    return null;\n  } // Can find the shadow root otherwise it'll return the document\n\n\n  if (typeof element.getRootNode === 'function') {\n    const root = element.getRootNode();\n    return root instanceof ShadowRoot ? root : null;\n  }\n\n  if (element instanceof ShadowRoot) {\n    return element;\n  } // when we don't find a shadow root\n\n\n  if (!element.parentNode) {\n    return null;\n  }\n\n  return $xqrD$var$findShadowRoot(element.parentNode);\n};\n\nconst $xqrD$var$noop = () => {};\n/**\n * Trick to restart an element's animation\n *\n * @param {HTMLElement} element\n * @return void\n *\n * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation\n */\n\n\nconst $xqrD$var$reflow = element => {\n  // eslint-disable-next-line no-unused-expressions\n  element.offsetHeight;\n};\n\nconst $xqrD$var$getjQuery = () => {\n  const {\n    jQuery\n  } = window;\n\n  if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n    return jQuery;\n  }\n\n  return null;\n};\n\nconst $xqrD$var$DOMContentLoadedCallbacks = [];\n\nconst $xqrD$var$onDOMContentLoaded = callback => {\n  if (document.readyState === 'loading') {\n    // add listener on the first call when the document is in loading state\n    if (!$xqrD$var$DOMContentLoadedCallbacks.length) {\n      document.addEventListener('DOMContentLoaded', () => {\n        $xqrD$var$DOMContentLoadedCallbacks.forEach(callback => callback());\n      });\n    }\n\n    $xqrD$var$DOMContentLoadedCallbacks.push(callback);\n  } else {\n    callback();\n  }\n};\n\nconst $xqrD$var$isRTL = () => document.documentElement.dir === 'rtl';\n\nconst $xqrD$var$defineJQueryPlugin = plugin => {\n  $xqrD$var$onDOMContentLoaded(() => {\n    const $ = $xqrD$var$getjQuery();\n    /* istanbul ignore if */\n\n    if ($) {\n      const name = plugin.NAME;\n      const JQUERY_NO_CONFLICT = $.fn[name];\n      $.fn[name] = plugin.jQueryInterface;\n      $.fn[name].Constructor = plugin;\n\n      $.fn[name].noConflict = () => {\n        $.fn[name] = JQUERY_NO_CONFLICT;\n        return plugin.jQueryInterface;\n      };\n    }\n  });\n};\n\nconst $xqrD$var$execute = callback => {\n  if (typeof callback === 'function') {\n    callback();\n  }\n};\n\nconst $xqrD$var$executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {\n  if (!waitForTransition) {\n    $xqrD$var$execute(callback);\n    return;\n  }\n\n  const durationPadding = 5;\n  const emulatedDuration = $xqrD$var$getTransitionDurationFromElement(transitionElement) + durationPadding;\n  let called = false;\n\n  const handler = ({\n    target\n  }) => {\n    if (target !== transitionElement) {\n      return;\n    }\n\n    called = true;\n    transitionElement.removeEventListener($xqrD$var$TRANSITION_END, handler);\n    $xqrD$var$execute(callback);\n  };\n\n  transitionElement.addEventListener($xqrD$var$TRANSITION_END, handler);\n  setTimeout(() => {\n    if (!called) {\n      $xqrD$var$triggerTransitionEnd(transitionElement);\n    }\n  }, emulatedDuration);\n};\n/**\n * Return the previous/next element of a list.\n *\n * @param {array} list    The list of elements\n * @param activeElement   The active element\n * @param shouldGetNext   Choose to get next or previous element\n * @param isCycleAllowed\n * @return {Element|elem} The proper element\n */\n\n\nconst $xqrD$var$getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {\n  let index = list.indexOf(activeElement); // if the element does not exist in the list return an element depending on the direction and if cycle is allowed\n\n  if (index === -1) {\n    return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0];\n  }\n\n  const listLength = list.length;\n  index += shouldGetNext ? 1 : -1;\n\n  if (isCycleAllowed) {\n    index = (index + listLength) % listLength;\n  }\n\n  return list[Math.max(0, Math.min(index, listLength - 1))];\n};\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): dom/event-handler.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\n\nconst $xqrD$var$namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\nconst $xqrD$var$stripNameRegex = /\\..*/;\nconst $xqrD$var$stripUidRegex = /::\\d+$/;\nconst $xqrD$var$eventRegistry = {}; // Events storage\n\nlet $xqrD$var$uidEvent = 1;\nconst $xqrD$var$customEvents = {\n  mouseenter: 'mouseover',\n  mouseleave: 'mouseout'\n};\nconst $xqrD$var$customEventsRegex = /^(mouseenter|mouseleave)/i;\nconst $xqrD$var$nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);\n/**\n * ------------------------------------------------------------------------\n * Private methods\n * ------------------------------------------------------------------------\n */\n\nfunction $xqrD$var$getUidEvent(element, uid) {\n  return uid && `${uid}::${$xqrD$var$uidEvent++}` || element.uidEvent || $xqrD$var$uidEvent++;\n}\n\nfunction $xqrD$var$getEvent(element) {\n  const uid = $xqrD$var$getUidEvent(element);\n  element.uidEvent = uid;\n  $xqrD$var$eventRegistry[uid] = $xqrD$var$eventRegistry[uid] || {};\n  return $xqrD$var$eventRegistry[uid];\n}\n\nfunction $xqrD$var$bootstrapHandler(element, fn) {\n  return function handler(event) {\n    event.delegateTarget = element;\n\n    if (handler.oneOff) {\n      $xqrD$var$EventHandler.off(element, event.type, fn);\n    }\n\n    return fn.apply(element, [event]);\n  };\n}\n\nfunction $xqrD$var$bootstrapDelegationHandler(element, selector, fn) {\n  return function handler(event) {\n    const domElements = element.querySelectorAll(selector);\n\n    for (let {\n      target\n    } = event; target && target !== this; target = target.parentNode) {\n      for (let i = domElements.length; i--;) {\n        if (domElements[i] === target) {\n          event.delegateTarget = target;\n\n          if (handler.oneOff) {\n            $xqrD$var$EventHandler.off(element, event.type, selector, fn);\n          }\n\n          return fn.apply(target, [event]);\n        }\n      }\n    } // To please ESLint\n\n\n    return null;\n  };\n}\n\nfunction $xqrD$var$findHandler(events, handler, delegationSelector = null) {\n  const uidEventList = Object.keys(events);\n\n  for (let i = 0, len = uidEventList.length; i < len; i++) {\n    const event = events[uidEventList[i]];\n\n    if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {\n      return event;\n    }\n  }\n\n  return null;\n}\n\nfunction $xqrD$var$normalizeParams(originalTypeEvent, handler, delegationFn) {\n  const delegation = typeof handler === 'string';\n  const originalHandler = delegation ? delegationFn : handler;\n  let typeEvent = $xqrD$var$getTypeEvent(originalTypeEvent);\n  const isNative = $xqrD$var$nativeEvents.has(typeEvent);\n\n  if (!isNative) {\n    typeEvent = originalTypeEvent;\n  }\n\n  return [delegation, originalHandler, typeEvent];\n}\n\nfunction $xqrD$var$addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {\n  if (typeof originalTypeEvent !== 'string' || !element) {\n    return;\n  }\n\n  if (!handler) {\n    handler = delegationFn;\n    delegationFn = null;\n  } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n  // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n\n\n  if ($xqrD$var$customEventsRegex.test(originalTypeEvent)) {\n    const wrapFn = fn => {\n      return function (event) {\n        if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {\n          return fn.call(this, event);\n        }\n      };\n    };\n\n    if (delegationFn) {\n      delegationFn = wrapFn(delegationFn);\n    } else {\n      handler = wrapFn(handler);\n    }\n  }\n\n  const [delegation, originalHandler, typeEvent] = $xqrD$var$normalizeParams(originalTypeEvent, handler, delegationFn);\n  const events = $xqrD$var$getEvent(element);\n  const handlers = events[typeEvent] || (events[typeEvent] = {});\n  const previousFn = $xqrD$var$findHandler(handlers, originalHandler, delegation ? handler : null);\n\n  if (previousFn) {\n    previousFn.oneOff = previousFn.oneOff && oneOff;\n    return;\n  }\n\n  const uid = $xqrD$var$getUidEvent(originalHandler, originalTypeEvent.replace($xqrD$var$namespaceRegex, ''));\n  const fn = delegation ? $xqrD$var$bootstrapDelegationHandler(element, handler, delegationFn) : $xqrD$var$bootstrapHandler(element, handler);\n  fn.delegationSelector = delegation ? handler : null;\n  fn.originalHandler = originalHandler;\n  fn.oneOff = oneOff;\n  fn.uidEvent = uid;\n  handlers[uid] = fn;\n  element.addEventListener(typeEvent, fn, delegation);\n}\n\nfunction $xqrD$var$removeHandler(element, events, typeEvent, handler, delegationSelector) {\n  const fn = $xqrD$var$findHandler(events[typeEvent], handler, delegationSelector);\n\n  if (!fn) {\n    return;\n  }\n\n  element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));\n  delete events[typeEvent][fn.uidEvent];\n}\n\nfunction $xqrD$var$removeNamespacedHandlers(element, events, typeEvent, namespace) {\n  const storeElementEvent = events[typeEvent] || {};\n  Object.keys(storeElementEvent).forEach(handlerKey => {\n    if (handlerKey.includes(namespace)) {\n      const event = storeElementEvent[handlerKey];\n      $xqrD$var$removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n    }\n  });\n}\n\nfunction $xqrD$var$getTypeEvent(event) {\n  // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n  event = event.replace($xqrD$var$stripNameRegex, '');\n  return $xqrD$var$customEvents[event] || event;\n}\n\nconst $xqrD$var$EventHandler = {\n  on(element, event, handler, delegationFn) {\n    $xqrD$var$addHandler(element, event, handler, delegationFn, false);\n  },\n\n  one(element, event, handler, delegationFn) {\n    $xqrD$var$addHandler(element, event, handler, delegationFn, true);\n  },\n\n  off(element, originalTypeEvent, handler, delegationFn) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return;\n    }\n\n    const [delegation, originalHandler, typeEvent] = $xqrD$var$normalizeParams(originalTypeEvent, handler, delegationFn);\n    const inNamespace = typeEvent !== originalTypeEvent;\n    const events = $xqrD$var$getEvent(element);\n    const isNamespace = originalTypeEvent.startsWith('.');\n\n    if (typeof originalHandler !== 'undefined') {\n      // Simplest case: handler is passed, remove that listener ONLY.\n      if (!events || !events[typeEvent]) {\n        return;\n      }\n\n      $xqrD$var$removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);\n      return;\n    }\n\n    if (isNamespace) {\n      Object.keys(events).forEach(elementEvent => {\n        $xqrD$var$removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));\n      });\n    }\n\n    const storeElementEvent = events[typeEvent] || {};\n    Object.keys(storeElementEvent).forEach(keyHandlers => {\n      const handlerKey = keyHandlers.replace($xqrD$var$stripUidRegex, '');\n\n      if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n        const event = storeElementEvent[keyHandlers];\n        $xqrD$var$removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n      }\n    });\n  },\n\n  trigger(element, event, args) {\n    if (typeof event !== 'string' || !element) {\n      return null;\n    }\n\n    const $ = $xqrD$var$getjQuery();\n    const typeEvent = $xqrD$var$getTypeEvent(event);\n    const inNamespace = event !== typeEvent;\n    const isNative = $xqrD$var$nativeEvents.has(typeEvent);\n    let jQueryEvent;\n    let bubbles = true;\n    let nativeDispatch = true;\n    let defaultPrevented = false;\n    let evt = null;\n\n    if (inNamespace && $) {\n      jQueryEvent = $.Event(event, args);\n      $(element).trigger(jQueryEvent);\n      bubbles = !jQueryEvent.isPropagationStopped();\n      nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();\n      defaultPrevented = jQueryEvent.isDefaultPrevented();\n    }\n\n    if (isNative) {\n      evt = document.createEvent('HTMLEvents');\n      evt.initEvent(typeEvent, bubbles, true);\n    } else {\n      evt = new CustomEvent(event, {\n        bubbles,\n        cancelable: true\n      });\n    } // merge custom information in our event\n\n\n    if (typeof args !== 'undefined') {\n      Object.keys(args).forEach(key => {\n        Object.defineProperty(evt, key, {\n          get() {\n            return args[key];\n          }\n\n        });\n      });\n    }\n\n    if (defaultPrevented) {\n      evt.preventDefault();\n    }\n\n    if (nativeDispatch) {\n      element.dispatchEvent(evt);\n    }\n\n    if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {\n      jQueryEvent.preventDefault();\n    }\n\n    return evt;\n  }\n\n};\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): dom/data.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst $xqrD$var$elementMap = new Map();\nconst $xqrD$var$Data = {\n  set(element, key, instance) {\n    if (!$xqrD$var$elementMap.has(element)) {\n      $xqrD$var$elementMap.set(element, new Map());\n    }\n\n    const instanceMap = $xqrD$var$elementMap.get(element); // make it clear we only want one instance per element\n    // can be removed later when multiple key/instances are fine to be used\n\n    if (!instanceMap.has(key) && instanceMap.size !== 0) {\n      // eslint-disable-next-line no-console\n      console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);\n      return;\n    }\n\n    instanceMap.set(key, instance);\n  },\n\n  get(element, key) {\n    if ($xqrD$var$elementMap.has(element)) {\n      return $xqrD$var$elementMap.get(element).get(key) || null;\n    }\n\n    return null;\n  },\n\n  remove(element, key) {\n    if (!$xqrD$var$elementMap.has(element)) {\n      return;\n    }\n\n    const instanceMap = $xqrD$var$elementMap.get(element);\n    instanceMap.delete(key); // free up element references if there are no instances left for an element\n\n    if (instanceMap.size === 0) {\n      $xqrD$var$elementMap.delete(element);\n    }\n  }\n\n};\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): base-component.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst $xqrD$var$VERSION = '5.1.3';\n\nclass $xqrD$var$BaseComponent {\n  constructor(element) {\n    element = $xqrD$var$getElement(element);\n\n    if (!element) {\n      return;\n    }\n\n    this._element = element;\n    $xqrD$var$Data.set(this._element, this.constructor.DATA_KEY, this);\n  }\n\n  dispose() {\n    $xqrD$var$Data.remove(this._element, this.constructor.DATA_KEY);\n    $xqrD$var$EventHandler.off(this._element, this.constructor.EVENT_KEY);\n    Object.getOwnPropertyNames(this).forEach(propertyName => {\n      this[propertyName] = null;\n    });\n  }\n\n  _queueCallback(callback, element, isAnimated = true) {\n    $xqrD$var$executeAfterTransition(callback, element, isAnimated);\n  }\n  /** Static */\n\n\n  static getInstance(element) {\n    return $xqrD$var$Data.get($xqrD$var$getElement(element), this.DATA_KEY);\n  }\n\n  static getOrCreateInstance(element, config = {}) {\n    return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);\n  }\n\n  static get VERSION() {\n    return $xqrD$var$VERSION;\n  }\n\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!');\n  }\n\n  static get DATA_KEY() {\n    return `bs.${this.NAME}`;\n  }\n\n  static get EVENT_KEY() {\n    return `.${this.DATA_KEY}`;\n  }\n\n}\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): util/component-functions.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n\nconst $xqrD$var$enableDismissTrigger = (component, method = 'hide') => {\n  const clickEvent = `click.dismiss${component.EVENT_KEY}`;\n  const name = component.NAME;\n  $xqrD$var$EventHandler.on(document, clickEvent, `[data-bs-dismiss=\"${name}\"]`, function (event) {\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n\n    if ($xqrD$var$isDisabled(this)) {\n      return;\n    }\n\n    const target = $xqrD$var$getElementFromSelector(this) || this.closest(`.${name}`);\n    const instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method\n\n    instance[method]();\n  });\n};\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): alert.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\n\nconst $xqrD$var$NAME$d = 'alert';\nconst $xqrD$var$DATA_KEY$c = 'bs.alert';\nconst $xqrD$var$EVENT_KEY$c = `.${$xqrD$var$DATA_KEY$c}`;\nconst $xqrD$var$EVENT_CLOSE = `close${$xqrD$var$EVENT_KEY$c}`;\nconst $xqrD$var$EVENT_CLOSED = `closed${$xqrD$var$EVENT_KEY$c}`;\nconst $xqrD$var$CLASS_NAME_FADE$5 = 'fade';\nconst $xqrD$var$CLASS_NAME_SHOW$8 = 'show';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass $xqrD$export$Alert extends $xqrD$var$BaseComponent {\n  // Getters\n  static get NAME() {\n    return $xqrD$var$NAME$d;\n  } // Public\n\n\n  close() {\n    const closeEvent = $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_CLOSE);\n\n    if (closeEvent.defaultPrevented) {\n      return;\n    }\n\n    this._element.classList.remove($xqrD$var$CLASS_NAME_SHOW$8);\n\n    const isAnimated = this._element.classList.contains($xqrD$var$CLASS_NAME_FADE$5);\n\n    this._queueCallback(() => this._destroyElement(), this._element, isAnimated);\n  } // Private\n\n\n  _destroyElement() {\n    this._element.remove();\n\n    $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_CLOSED);\n    this.dispose();\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = $xqrD$export$Alert.getOrCreateInstance(this);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config](this);\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$xqrD$var$enableDismissTrigger($xqrD$export$Alert, 'close');\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Alert to jQuery only if jQuery is present\n */\n\n$xqrD$var$defineJQueryPlugin($xqrD$export$Alert);\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): button.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst $xqrD$var$NAME$c = 'button';\nconst $xqrD$var$DATA_KEY$b = 'bs.button';\nconst $xqrD$var$EVENT_KEY$b = `.${$xqrD$var$DATA_KEY$b}`;\nconst $xqrD$var$DATA_API_KEY$7 = '.data-api';\nconst $xqrD$var$CLASS_NAME_ACTIVE$3 = 'active';\nconst $xqrD$var$SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle=\"button\"]';\nconst $xqrD$var$EVENT_CLICK_DATA_API$6 = `click${$xqrD$var$EVENT_KEY$b}${$xqrD$var$DATA_API_KEY$7}`;\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass $xqrD$export$Button extends $xqrD$var$BaseComponent {\n  // Getters\n  static get NAME() {\n    return $xqrD$var$NAME$c;\n  } // Public\n\n\n  toggle() {\n    // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method\n    this._element.setAttribute('aria-pressed', this._element.classList.toggle($xqrD$var$CLASS_NAME_ACTIVE$3));\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = $xqrD$export$Button.getOrCreateInstance(this);\n\n      if (config === 'toggle') {\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$xqrD$var$EventHandler.on(document, $xqrD$var$EVENT_CLICK_DATA_API$6, $xqrD$var$SELECTOR_DATA_TOGGLE$5, event => {\n  event.preventDefault();\n  const button = event.target.closest($xqrD$var$SELECTOR_DATA_TOGGLE$5);\n  const data = $xqrD$export$Button.getOrCreateInstance(button);\n  data.toggle();\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Button to jQuery only if jQuery is present\n */\n\n$xqrD$var$defineJQueryPlugin($xqrD$export$Button);\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): dom/manipulator.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nfunction $xqrD$var$normalizeData(val) {\n  if (val === 'true') {\n    return true;\n  }\n\n  if (val === 'false') {\n    return false;\n  }\n\n  if (val === Number(val).toString()) {\n    return Number(val);\n  }\n\n  if (val === '' || val === 'null') {\n    return null;\n  }\n\n  return val;\n}\n\nfunction $xqrD$var$normalizeDataKey(key) {\n  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);\n}\n\nconst $xqrD$var$Manipulator = {\n  setDataAttribute(element, key, value) {\n    element.setAttribute(`data-bs-${$xqrD$var$normalizeDataKey(key)}`, value);\n  },\n\n  removeDataAttribute(element, key) {\n    element.removeAttribute(`data-bs-${$xqrD$var$normalizeDataKey(key)}`);\n  },\n\n  getDataAttributes(element) {\n    if (!element) {\n      return {};\n    }\n\n    const attributes = {};\n    Object.keys(element.dataset).filter(key => key.startsWith('bs')).forEach(key => {\n      let pureKey = key.replace(/^bs/, '');\n      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n      attributes[pureKey] = $xqrD$var$normalizeData(element.dataset[key]);\n    });\n    return attributes;\n  },\n\n  getDataAttribute(element, key) {\n    return $xqrD$var$normalizeData(element.getAttribute(`data-bs-${$xqrD$var$normalizeDataKey(key)}`));\n  },\n\n  offset(element) {\n    const rect = element.getBoundingClientRect();\n    return {\n      top: rect.top + window.pageYOffset,\n      left: rect.left + window.pageXOffset\n    };\n  },\n\n  position(element) {\n    return {\n      top: element.offsetTop,\n      left: element.offsetLeft\n    };\n  }\n\n};\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): dom/selector-engine.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst $xqrD$var$NODE_TEXT = 3;\nconst $xqrD$var$SelectorEngine = {\n  find(selector, element = document.documentElement) {\n    return [].concat(...Element.prototype.querySelectorAll.call(element, selector));\n  },\n\n  findOne(selector, element = document.documentElement) {\n    return Element.prototype.querySelector.call(element, selector);\n  },\n\n  children(element, selector) {\n    return [].concat(...element.children).filter(child => child.matches(selector));\n  },\n\n  parents(element, selector) {\n    const parents = [];\n    let ancestor = element.parentNode;\n\n    while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== $xqrD$var$NODE_TEXT) {\n      if (ancestor.matches(selector)) {\n        parents.push(ancestor);\n      }\n\n      ancestor = ancestor.parentNode;\n    }\n\n    return parents;\n  },\n\n  prev(element, selector) {\n    let previous = element.previousElementSibling;\n\n    while (previous) {\n      if (previous.matches(selector)) {\n        return [previous];\n      }\n\n      previous = previous.previousElementSibling;\n    }\n\n    return [];\n  },\n\n  next(element, selector) {\n    let next = element.nextElementSibling;\n\n    while (next) {\n      if (next.matches(selector)) {\n        return [next];\n      }\n\n      next = next.nextElementSibling;\n    }\n\n    return [];\n  },\n\n  focusableChildren(element) {\n    const focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable=\"true\"]'].map(selector => `${selector}:not([tabindex^=\"-\"])`).join(', ');\n    return this.find(focusables, element).filter(el => !$xqrD$var$isDisabled(el) && $xqrD$var$isVisible(el));\n  }\n\n};\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): carousel.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst $xqrD$var$NAME$b = 'carousel';\nconst $xqrD$var$DATA_KEY$a = 'bs.carousel';\nconst $xqrD$var$EVENT_KEY$a = `.${$xqrD$var$DATA_KEY$a}`;\nconst $xqrD$var$DATA_API_KEY$6 = '.data-api';\nconst $xqrD$var$ARROW_LEFT_KEY = 'ArrowLeft';\nconst $xqrD$var$ARROW_RIGHT_KEY = 'ArrowRight';\nconst $xqrD$var$TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch\n\nconst $xqrD$var$SWIPE_THRESHOLD = 40;\nconst $xqrD$var$Default$a = {\n  interval: 5000,\n  keyboard: true,\n  slide: false,\n  pause: 'hover',\n  wrap: true,\n  touch: true\n};\nconst $xqrD$var$DefaultType$a = {\n  interval: '(number|boolean)',\n  keyboard: 'boolean',\n  slide: '(boolean|string)',\n  pause: '(string|boolean)',\n  wrap: 'boolean',\n  touch: 'boolean'\n};\nconst $xqrD$var$ORDER_NEXT = 'next';\nconst $xqrD$var$ORDER_PREV = 'prev';\nconst $xqrD$var$DIRECTION_LEFT = 'left';\nconst $xqrD$var$DIRECTION_RIGHT = 'right';\nconst $xqrD$var$KEY_TO_DIRECTION = {\n  [$xqrD$var$ARROW_LEFT_KEY]: $xqrD$var$DIRECTION_RIGHT,\n  [$xqrD$var$ARROW_RIGHT_KEY]: $xqrD$var$DIRECTION_LEFT\n};\nconst $xqrD$var$EVENT_SLIDE = `slide${$xqrD$var$EVENT_KEY$a}`;\nconst $xqrD$var$EVENT_SLID = `slid${$xqrD$var$EVENT_KEY$a}`;\nconst $xqrD$var$EVENT_KEYDOWN = `keydown${$xqrD$var$EVENT_KEY$a}`;\nconst $xqrD$var$EVENT_MOUSEENTER = `mouseenter${$xqrD$var$EVENT_KEY$a}`;\nconst $xqrD$var$EVENT_MOUSELEAVE = `mouseleave${$xqrD$var$EVENT_KEY$a}`;\nconst $xqrD$var$EVENT_TOUCHSTART = `touchstart${$xqrD$var$EVENT_KEY$a}`;\nconst $xqrD$var$EVENT_TOUCHMOVE = `touchmove${$xqrD$var$EVENT_KEY$a}`;\nconst $xqrD$var$EVENT_TOUCHEND = `touchend${$xqrD$var$EVENT_KEY$a}`;\nconst $xqrD$var$EVENT_POINTERDOWN = `pointerdown${$xqrD$var$EVENT_KEY$a}`;\nconst $xqrD$var$EVENT_POINTERUP = `pointerup${$xqrD$var$EVENT_KEY$a}`;\nconst $xqrD$var$EVENT_DRAG_START = `dragstart${$xqrD$var$EVENT_KEY$a}`;\nconst $xqrD$var$EVENT_LOAD_DATA_API$2 = `load${$xqrD$var$EVENT_KEY$a}${$xqrD$var$DATA_API_KEY$6}`;\nconst $xqrD$var$EVENT_CLICK_DATA_API$5 = `click${$xqrD$var$EVENT_KEY$a}${$xqrD$var$DATA_API_KEY$6}`;\nconst $xqrD$var$CLASS_NAME_CAROUSEL = 'carousel';\nconst $xqrD$var$CLASS_NAME_ACTIVE$2 = 'active';\nconst $xqrD$var$CLASS_NAME_SLIDE = 'slide';\nconst $xqrD$var$CLASS_NAME_END = 'carousel-item-end';\nconst $xqrD$var$CLASS_NAME_START = 'carousel-item-start';\nconst $xqrD$var$CLASS_NAME_NEXT = 'carousel-item-next';\nconst $xqrD$var$CLASS_NAME_PREV = 'carousel-item-prev';\nconst $xqrD$var$CLASS_NAME_POINTER_EVENT = 'pointer-event';\nconst $xqrD$var$SELECTOR_ACTIVE$1 = '.active';\nconst $xqrD$var$SELECTOR_ACTIVE_ITEM = '.active.carousel-item';\nconst $xqrD$var$SELECTOR_ITEM = '.carousel-item';\nconst $xqrD$var$SELECTOR_ITEM_IMG = '.carousel-item img';\nconst $xqrD$var$SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';\nconst $xqrD$var$SELECTOR_INDICATORS = '.carousel-indicators';\nconst $xqrD$var$SELECTOR_INDICATOR = '[data-bs-target]';\nconst $xqrD$var$SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';\nconst $xqrD$var$SELECTOR_DATA_RIDE = '[data-bs-ride=\"carousel\"]';\nconst $xqrD$var$POINTER_TYPE_TOUCH = 'touch';\nconst $xqrD$var$POINTER_TYPE_PEN = 'pen';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass $xqrD$export$Carousel extends $xqrD$var$BaseComponent {\n  constructor(element, config) {\n    super(element);\n    this._items = null;\n    this._interval = null;\n    this._activeElement = null;\n    this._isPaused = false;\n    this._isSliding = false;\n    this.touchTimeout = null;\n    this.touchStartX = 0;\n    this.touchDeltaX = 0;\n    this._config = this._getConfig(config);\n    this._indicatorsElement = $xqrD$var$SelectorEngine.findOne($xqrD$var$SELECTOR_INDICATORS, this._element);\n    this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;\n    this._pointerEvent = Boolean(window.PointerEvent);\n\n    this._addEventListeners();\n  } // Getters\n\n\n  static get Default() {\n    return $xqrD$var$Default$a;\n  }\n\n  static get NAME() {\n    return $xqrD$var$NAME$b;\n  } // Public\n\n\n  next() {\n    this._slide($xqrD$var$ORDER_NEXT);\n  }\n\n  nextWhenVisible() {\n    // Don't call next when the page isn't visible\n    // or the carousel or its parent isn't visible\n    if (!document.hidden && $xqrD$var$isVisible(this._element)) {\n      this.next();\n    }\n  }\n\n  prev() {\n    this._slide($xqrD$var$ORDER_PREV);\n  }\n\n  pause(event) {\n    if (!event) {\n      this._isPaused = true;\n    }\n\n    if ($xqrD$var$SelectorEngine.findOne($xqrD$var$SELECTOR_NEXT_PREV, this._element)) {\n      $xqrD$var$triggerTransitionEnd(this._element);\n      this.cycle(true);\n    }\n\n    clearInterval(this._interval);\n    this._interval = null;\n  }\n\n  cycle(event) {\n    if (!event) {\n      this._isPaused = false;\n    }\n\n    if (this._interval) {\n      clearInterval(this._interval);\n      this._interval = null;\n    }\n\n    if (this._config && this._config.interval && !this._isPaused) {\n      this._updateInterval();\n\n      this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);\n    }\n  }\n\n  to(index) {\n    this._activeElement = $xqrD$var$SelectorEngine.findOne($xqrD$var$SELECTOR_ACTIVE_ITEM, this._element);\n\n    const activeIndex = this._getItemIndex(this._activeElement);\n\n    if (index > this._items.length - 1 || index < 0) {\n      return;\n    }\n\n    if (this._isSliding) {\n      $xqrD$var$EventHandler.one(this._element, $xqrD$var$EVENT_SLID, () => this.to(index));\n      return;\n    }\n\n    if (activeIndex === index) {\n      this.pause();\n      this.cycle();\n      return;\n    }\n\n    const order = index > activeIndex ? $xqrD$var$ORDER_NEXT : $xqrD$var$ORDER_PREV;\n\n    this._slide(order, this._items[index]);\n  } // Private\n\n\n  _getConfig(config) {\n    config = { ...$xqrD$var$Default$a,\n      ...$xqrD$var$Manipulator.getDataAttributes(this._element),\n      ...(typeof config === 'object' ? config : {})\n    };\n    $xqrD$var$typeCheckConfig($xqrD$var$NAME$b, config, $xqrD$var$DefaultType$a);\n    return config;\n  }\n\n  _handleSwipe() {\n    const absDeltax = Math.abs(this.touchDeltaX);\n\n    if (absDeltax <= $xqrD$var$SWIPE_THRESHOLD) {\n      return;\n    }\n\n    const direction = absDeltax / this.touchDeltaX;\n    this.touchDeltaX = 0;\n\n    if (!direction) {\n      return;\n    }\n\n    this._slide(direction > 0 ? $xqrD$var$DIRECTION_RIGHT : $xqrD$var$DIRECTION_LEFT);\n  }\n\n  _addEventListeners() {\n    if (this._config.keyboard) {\n      $xqrD$var$EventHandler.on(this._element, $xqrD$var$EVENT_KEYDOWN, event => this._keydown(event));\n    }\n\n    if (this._config.pause === 'hover') {\n      $xqrD$var$EventHandler.on(this._element, $xqrD$var$EVENT_MOUSEENTER, event => this.pause(event));\n      $xqrD$var$EventHandler.on(this._element, $xqrD$var$EVENT_MOUSELEAVE, event => this.cycle(event));\n    }\n\n    if (this._config.touch && this._touchSupported) {\n      this._addTouchEventListeners();\n    }\n  }\n\n  _addTouchEventListeners() {\n    const hasPointerPenTouch = event => {\n      return this._pointerEvent && (event.pointerType === $xqrD$var$POINTER_TYPE_PEN || event.pointerType === $xqrD$var$POINTER_TYPE_TOUCH);\n    };\n\n    const start = event => {\n      if (hasPointerPenTouch(event)) {\n        this.touchStartX = event.clientX;\n      } else if (!this._pointerEvent) {\n        this.touchStartX = event.touches[0].clientX;\n      }\n    };\n\n    const move = event => {\n      // ensure swiping with one touch and not pinching\n      this.touchDeltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this.touchStartX;\n    };\n\n    const end = event => {\n      if (hasPointerPenTouch(event)) {\n        this.touchDeltaX = event.clientX - this.touchStartX;\n      }\n\n      this._handleSwipe();\n\n      if (this._config.pause === 'hover') {\n        // If it's a touch-enabled device, mouseenter/leave are fired as\n        // part of the mouse compatibility events on first tap - the carousel\n        // would stop cycling until user tapped out of it;\n        // here, we listen for touchend, explicitly pause the carousel\n        // (as if it's the second time we tap on it, mouseenter compat event\n        // is NOT fired) and after a timeout (to allow for mouse compatibility\n        // events to fire) we explicitly restart cycling\n        this.pause();\n\n        if (this.touchTimeout) {\n          clearTimeout(this.touchTimeout);\n        }\n\n        this.touchTimeout = setTimeout(event => this.cycle(event), $xqrD$var$TOUCHEVENT_COMPAT_WAIT + this._config.interval);\n      }\n    };\n\n    $xqrD$var$SelectorEngine.find($xqrD$var$SELECTOR_ITEM_IMG, this._element).forEach(itemImg => {\n      $xqrD$var$EventHandler.on(itemImg, $xqrD$var$EVENT_DRAG_START, event => event.preventDefault());\n    });\n\n    if (this._pointerEvent) {\n      $xqrD$var$EventHandler.on(this._element, $xqrD$var$EVENT_POINTERDOWN, event => start(event));\n      $xqrD$var$EventHandler.on(this._element, $xqrD$var$EVENT_POINTERUP, event => end(event));\n\n      this._element.classList.add($xqrD$var$CLASS_NAME_POINTER_EVENT);\n    } else {\n      $xqrD$var$EventHandler.on(this._element, $xqrD$var$EVENT_TOUCHSTART, event => start(event));\n      $xqrD$var$EventHandler.on(this._element, $xqrD$var$EVENT_TOUCHMOVE, event => move(event));\n      $xqrD$var$EventHandler.on(this._element, $xqrD$var$EVENT_TOUCHEND, event => end(event));\n    }\n  }\n\n  _keydown(event) {\n    if (/input|textarea/i.test(event.target.tagName)) {\n      return;\n    }\n\n    const direction = $xqrD$var$KEY_TO_DIRECTION[event.key];\n\n    if (direction) {\n      event.preventDefault();\n\n      this._slide(direction);\n    }\n  }\n\n  _getItemIndex(element) {\n    this._items = element && element.parentNode ? $xqrD$var$SelectorEngine.find($xqrD$var$SELECTOR_ITEM, element.parentNode) : [];\n    return this._items.indexOf(element);\n  }\n\n  _getItemByOrder(order, activeElement) {\n    const isNext = order === $xqrD$var$ORDER_NEXT;\n    return $xqrD$var$getNextActiveElement(this._items, activeElement, isNext, this._config.wrap);\n  }\n\n  _triggerSlideEvent(relatedTarget, eventDirectionName) {\n    const targetIndex = this._getItemIndex(relatedTarget);\n\n    const fromIndex = this._getItemIndex($xqrD$var$SelectorEngine.findOne($xqrD$var$SELECTOR_ACTIVE_ITEM, this._element));\n\n    return $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_SLIDE, {\n      relatedTarget,\n      direction: eventDirectionName,\n      from: fromIndex,\n      to: targetIndex\n    });\n  }\n\n  _setActiveIndicatorElement(element) {\n    if (this._indicatorsElement) {\n      const activeIndicator = $xqrD$var$SelectorEngine.findOne($xqrD$var$SELECTOR_ACTIVE$1, this._indicatorsElement);\n      activeIndicator.classList.remove($xqrD$var$CLASS_NAME_ACTIVE$2);\n      activeIndicator.removeAttribute('aria-current');\n      const indicators = $xqrD$var$SelectorEngine.find($xqrD$var$SELECTOR_INDICATOR, this._indicatorsElement);\n\n      for (let i = 0; i < indicators.length; i++) {\n        if (Number.parseInt(indicators[i].getAttribute('data-bs-slide-to'), 10) === this._getItemIndex(element)) {\n          indicators[i].classList.add($xqrD$var$CLASS_NAME_ACTIVE$2);\n          indicators[i].setAttribute('aria-current', 'true');\n          break;\n        }\n      }\n    }\n  }\n\n  _updateInterval() {\n    const element = this._activeElement || $xqrD$var$SelectorEngine.findOne($xqrD$var$SELECTOR_ACTIVE_ITEM, this._element);\n\n    if (!element) {\n      return;\n    }\n\n    const elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);\n\n    if (elementInterval) {\n      this._config.defaultInterval = this._config.defaultInterval || this._config.interval;\n      this._config.interval = elementInterval;\n    } else {\n      this._config.interval = this._config.defaultInterval || this._config.interval;\n    }\n  }\n\n  _slide(directionOrOrder, element) {\n    const order = this._directionToOrder(directionOrOrder);\n\n    const activeElement = $xqrD$var$SelectorEngine.findOne($xqrD$var$SELECTOR_ACTIVE_ITEM, this._element);\n\n    const activeElementIndex = this._getItemIndex(activeElement);\n\n    const nextElement = element || this._getItemByOrder(order, activeElement);\n\n    const nextElementIndex = this._getItemIndex(nextElement);\n\n    const isCycling = Boolean(this._interval);\n    const isNext = order === $xqrD$var$ORDER_NEXT;\n    const directionalClassName = isNext ? $xqrD$var$CLASS_NAME_START : $xqrD$var$CLASS_NAME_END;\n    const orderClassName = isNext ? $xqrD$var$CLASS_NAME_NEXT : $xqrD$var$CLASS_NAME_PREV;\n\n    const eventDirectionName = this._orderToDirection(order);\n\n    if (nextElement && nextElement.classList.contains($xqrD$var$CLASS_NAME_ACTIVE$2)) {\n      this._isSliding = false;\n      return;\n    }\n\n    if (this._isSliding) {\n      return;\n    }\n\n    const slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);\n\n    if (slideEvent.defaultPrevented) {\n      return;\n    }\n\n    if (!activeElement || !nextElement) {\n      // Some weirdness is happening, so we bail\n      return;\n    }\n\n    this._isSliding = true;\n\n    if (isCycling) {\n      this.pause();\n    }\n\n    this._setActiveIndicatorElement(nextElement);\n\n    this._activeElement = nextElement;\n\n    const triggerSlidEvent = () => {\n      $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_SLID, {\n        relatedTarget: nextElement,\n        direction: eventDirectionName,\n        from: activeElementIndex,\n        to: nextElementIndex\n      });\n    };\n\n    if (this._element.classList.contains($xqrD$var$CLASS_NAME_SLIDE)) {\n      nextElement.classList.add(orderClassName);\n      $xqrD$var$reflow(nextElement);\n      activeElement.classList.add(directionalClassName);\n      nextElement.classList.add(directionalClassName);\n\n      const completeCallBack = () => {\n        nextElement.classList.remove(directionalClassName, orderClassName);\n        nextElement.classList.add($xqrD$var$CLASS_NAME_ACTIVE$2);\n        activeElement.classList.remove($xqrD$var$CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);\n        this._isSliding = false;\n        setTimeout(triggerSlidEvent, 0);\n      };\n\n      this._queueCallback(completeCallBack, activeElement, true);\n    } else {\n      activeElement.classList.remove($xqrD$var$CLASS_NAME_ACTIVE$2);\n      nextElement.classList.add($xqrD$var$CLASS_NAME_ACTIVE$2);\n      this._isSliding = false;\n      triggerSlidEvent();\n    }\n\n    if (isCycling) {\n      this.cycle();\n    }\n  }\n\n  _directionToOrder(direction) {\n    if (![$xqrD$var$DIRECTION_RIGHT, $xqrD$var$DIRECTION_LEFT].includes(direction)) {\n      return direction;\n    }\n\n    if ($xqrD$var$isRTL()) {\n      return direction === $xqrD$var$DIRECTION_LEFT ? $xqrD$var$ORDER_PREV : $xqrD$var$ORDER_NEXT;\n    }\n\n    return direction === $xqrD$var$DIRECTION_LEFT ? $xqrD$var$ORDER_NEXT : $xqrD$var$ORDER_PREV;\n  }\n\n  _orderToDirection(order) {\n    if (![$xqrD$var$ORDER_NEXT, $xqrD$var$ORDER_PREV].includes(order)) {\n      return order;\n    }\n\n    if ($xqrD$var$isRTL()) {\n      return order === $xqrD$var$ORDER_PREV ? $xqrD$var$DIRECTION_LEFT : $xqrD$var$DIRECTION_RIGHT;\n    }\n\n    return order === $xqrD$var$ORDER_PREV ? $xqrD$var$DIRECTION_RIGHT : $xqrD$var$DIRECTION_LEFT;\n  } // Static\n\n\n  static carouselInterface(element, config) {\n    const data = $xqrD$export$Carousel.getOrCreateInstance(element, config);\n    let {\n      _config\n    } = data;\n\n    if (typeof config === 'object') {\n      _config = { ..._config,\n        ...config\n      };\n    }\n\n    const action = typeof config === 'string' ? config : _config.slide;\n\n    if (typeof config === 'number') {\n      data.to(config);\n    } else if (typeof action === 'string') {\n      if (typeof data[action] === 'undefined') {\n        throw new TypeError(`No method named \"${action}\"`);\n      }\n\n      data[action]();\n    } else if (_config.interval && _config.ride) {\n      data.pause();\n      data.cycle();\n    }\n  }\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      $xqrD$export$Carousel.carouselInterface(this, config);\n    });\n  }\n\n  static dataApiClickHandler(event) {\n    const target = $xqrD$var$getElementFromSelector(this);\n\n    if (!target || !target.classList.contains($xqrD$var$CLASS_NAME_CAROUSEL)) {\n      return;\n    }\n\n    const config = { ...$xqrD$var$Manipulator.getDataAttributes(target),\n      ...$xqrD$var$Manipulator.getDataAttributes(this)\n    };\n    const slideIndex = this.getAttribute('data-bs-slide-to');\n\n    if (slideIndex) {\n      config.interval = false;\n    }\n\n    $xqrD$export$Carousel.carouselInterface(target, config);\n\n    if (slideIndex) {\n      $xqrD$export$Carousel.getInstance(target).to(slideIndex);\n    }\n\n    event.preventDefault();\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$xqrD$var$EventHandler.on(document, $xqrD$var$EVENT_CLICK_DATA_API$5, $xqrD$var$SELECTOR_DATA_SLIDE, $xqrD$export$Carousel.dataApiClickHandler);\n$xqrD$var$EventHandler.on(window, $xqrD$var$EVENT_LOAD_DATA_API$2, () => {\n  const carousels = $xqrD$var$SelectorEngine.find($xqrD$var$SELECTOR_DATA_RIDE);\n\n  for (let i = 0, len = carousels.length; i < len; i++) {\n    $xqrD$export$Carousel.carouselInterface(carousels[i], $xqrD$export$Carousel.getInstance(carousels[i]));\n  }\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Carousel to jQuery only if jQuery is present\n */\n\n$xqrD$var$defineJQueryPlugin($xqrD$export$Carousel);\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): collapse.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst $xqrD$var$NAME$a = 'collapse';\nconst $xqrD$var$DATA_KEY$9 = 'bs.collapse';\nconst $xqrD$var$EVENT_KEY$9 = `.${$xqrD$var$DATA_KEY$9}`;\nconst $xqrD$var$DATA_API_KEY$5 = '.data-api';\nconst $xqrD$var$Default$9 = {\n  toggle: true,\n  parent: null\n};\nconst $xqrD$var$DefaultType$9 = {\n  toggle: 'boolean',\n  parent: '(null|element)'\n};\nconst $xqrD$var$EVENT_SHOW$5 = `show${$xqrD$var$EVENT_KEY$9}`;\nconst $xqrD$var$EVENT_SHOWN$5 = `shown${$xqrD$var$EVENT_KEY$9}`;\nconst $xqrD$var$EVENT_HIDE$5 = `hide${$xqrD$var$EVENT_KEY$9}`;\nconst $xqrD$var$EVENT_HIDDEN$5 = `hidden${$xqrD$var$EVENT_KEY$9}`;\nconst $xqrD$var$EVENT_CLICK_DATA_API$4 = `click${$xqrD$var$EVENT_KEY$9}${$xqrD$var$DATA_API_KEY$5}`;\nconst $xqrD$var$CLASS_NAME_SHOW$7 = 'show';\nconst $xqrD$var$CLASS_NAME_COLLAPSE = 'collapse';\nconst $xqrD$var$CLASS_NAME_COLLAPSING = 'collapsing';\nconst $xqrD$var$CLASS_NAME_COLLAPSED = 'collapsed';\nconst $xqrD$var$CLASS_NAME_DEEPER_CHILDREN = `:scope .${$xqrD$var$CLASS_NAME_COLLAPSE} .${$xqrD$var$CLASS_NAME_COLLAPSE}`;\nconst $xqrD$var$CLASS_NAME_HORIZONTAL = 'collapse-horizontal';\nconst $xqrD$var$WIDTH = 'width';\nconst $xqrD$var$HEIGHT = 'height';\nconst $xqrD$var$SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';\nconst $xqrD$var$SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle=\"collapse\"]';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass $xqrD$export$Collapse extends $xqrD$var$BaseComponent {\n  constructor(element, config) {\n    super(element);\n    this._isTransitioning = false;\n    this._config = this._getConfig(config);\n    this._triggerArray = [];\n    const toggleList = $xqrD$var$SelectorEngine.find($xqrD$var$SELECTOR_DATA_TOGGLE$4);\n\n    for (let i = 0, len = toggleList.length; i < len; i++) {\n      const elem = toggleList[i];\n      const selector = $xqrD$var$getSelectorFromElement(elem);\n      const filterElement = $xqrD$var$SelectorEngine.find(selector).filter(foundElem => foundElem === this._element);\n\n      if (selector !== null && filterElement.length) {\n        this._selector = selector;\n\n        this._triggerArray.push(elem);\n      }\n    }\n\n    this._initializeChildren();\n\n    if (!this._config.parent) {\n      this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());\n    }\n\n    if (this._config.toggle) {\n      this.toggle();\n    }\n  } // Getters\n\n\n  static get Default() {\n    return $xqrD$var$Default$9;\n  }\n\n  static get NAME() {\n    return $xqrD$var$NAME$a;\n  } // Public\n\n\n  toggle() {\n    if (this._isShown()) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  show() {\n    if (this._isTransitioning || this._isShown()) {\n      return;\n    }\n\n    let actives = [];\n    let activesData;\n\n    if (this._config.parent) {\n      const children = $xqrD$var$SelectorEngine.find($xqrD$var$CLASS_NAME_DEEPER_CHILDREN, this._config.parent);\n      actives = $xqrD$var$SelectorEngine.find($xqrD$var$SELECTOR_ACTIVES, this._config.parent).filter(elem => !children.includes(elem)); // remove children if greater depth\n    }\n\n    const container = $xqrD$var$SelectorEngine.findOne(this._selector);\n\n    if (actives.length) {\n      const tempActiveData = actives.find(elem => container !== elem);\n      activesData = tempActiveData ? $xqrD$export$Collapse.getInstance(tempActiveData) : null;\n\n      if (activesData && activesData._isTransitioning) {\n        return;\n      }\n    }\n\n    const startEvent = $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_SHOW$5);\n\n    if (startEvent.defaultPrevented) {\n      return;\n    }\n\n    actives.forEach(elemActive => {\n      if (container !== elemActive) {\n        $xqrD$export$Collapse.getOrCreateInstance(elemActive, {\n          toggle: false\n        }).hide();\n      }\n\n      if (!activesData) {\n        $xqrD$var$Data.set(elemActive, $xqrD$var$DATA_KEY$9, null);\n      }\n    });\n\n    const dimension = this._getDimension();\n\n    this._element.classList.remove($xqrD$var$CLASS_NAME_COLLAPSE);\n\n    this._element.classList.add($xqrD$var$CLASS_NAME_COLLAPSING);\n\n    this._element.style[dimension] = 0;\n\n    this._addAriaAndCollapsedClass(this._triggerArray, true);\n\n    this._isTransitioning = true;\n\n    const complete = () => {\n      this._isTransitioning = false;\n\n      this._element.classList.remove($xqrD$var$CLASS_NAME_COLLAPSING);\n\n      this._element.classList.add($xqrD$var$CLASS_NAME_COLLAPSE, $xqrD$var$CLASS_NAME_SHOW$7);\n\n      this._element.style[dimension] = '';\n      $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_SHOWN$5);\n    };\n\n    const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n    const scrollSize = `scroll${capitalizedDimension}`;\n\n    this._queueCallback(complete, this._element, true);\n\n    this._element.style[dimension] = `${this._element[scrollSize]}px`;\n  }\n\n  hide() {\n    if (this._isTransitioning || !this._isShown()) {\n      return;\n    }\n\n    const startEvent = $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_HIDE$5);\n\n    if (startEvent.defaultPrevented) {\n      return;\n    }\n\n    const dimension = this._getDimension();\n\n    this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;\n    $xqrD$var$reflow(this._element);\n\n    this._element.classList.add($xqrD$var$CLASS_NAME_COLLAPSING);\n\n    this._element.classList.remove($xqrD$var$CLASS_NAME_COLLAPSE, $xqrD$var$CLASS_NAME_SHOW$7);\n\n    const triggerArrayLength = this._triggerArray.length;\n\n    for (let i = 0; i < triggerArrayLength; i++) {\n      const trigger = this._triggerArray[i];\n      const elem = $xqrD$var$getElementFromSelector(trigger);\n\n      if (elem && !this._isShown(elem)) {\n        this._addAriaAndCollapsedClass([trigger], false);\n      }\n    }\n\n    this._isTransitioning = true;\n\n    const complete = () => {\n      this._isTransitioning = false;\n\n      this._element.classList.remove($xqrD$var$CLASS_NAME_COLLAPSING);\n\n      this._element.classList.add($xqrD$var$CLASS_NAME_COLLAPSE);\n\n      $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_HIDDEN$5);\n    };\n\n    this._element.style[dimension] = '';\n\n    this._queueCallback(complete, this._element, true);\n  }\n\n  _isShown(element = this._element) {\n    return element.classList.contains($xqrD$var$CLASS_NAME_SHOW$7);\n  } // Private\n\n\n  _getConfig(config) {\n    config = { ...$xqrD$var$Default$9,\n      ...$xqrD$var$Manipulator.getDataAttributes(this._element),\n      ...config\n    };\n    config.toggle = Boolean(config.toggle); // Coerce string values\n\n    config.parent = $xqrD$var$getElement(config.parent);\n    $xqrD$var$typeCheckConfig($xqrD$var$NAME$a, config, $xqrD$var$DefaultType$9);\n    return config;\n  }\n\n  _getDimension() {\n    return this._element.classList.contains($xqrD$var$CLASS_NAME_HORIZONTAL) ? $xqrD$var$WIDTH : $xqrD$var$HEIGHT;\n  }\n\n  _initializeChildren() {\n    if (!this._config.parent) {\n      return;\n    }\n\n    const children = $xqrD$var$SelectorEngine.find($xqrD$var$CLASS_NAME_DEEPER_CHILDREN, this._config.parent);\n    $xqrD$var$SelectorEngine.find($xqrD$var$SELECTOR_DATA_TOGGLE$4, this._config.parent).filter(elem => !children.includes(elem)).forEach(element => {\n      const selected = $xqrD$var$getElementFromSelector(element);\n\n      if (selected) {\n        this._addAriaAndCollapsedClass([element], this._isShown(selected));\n      }\n    });\n  }\n\n  _addAriaAndCollapsedClass(triggerArray, isOpen) {\n    if (!triggerArray.length) {\n      return;\n    }\n\n    triggerArray.forEach(elem => {\n      if (isOpen) {\n        elem.classList.remove($xqrD$var$CLASS_NAME_COLLAPSED);\n      } else {\n        elem.classList.add($xqrD$var$CLASS_NAME_COLLAPSED);\n      }\n\n      elem.setAttribute('aria-expanded', isOpen);\n    });\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const _config = {};\n\n      if (typeof config === 'string' && /show|hide/.test(config)) {\n        _config.toggle = false;\n      }\n\n      const data = $xqrD$export$Collapse.getOrCreateInstance(this, _config);\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$xqrD$var$EventHandler.on(document, $xqrD$var$EVENT_CLICK_DATA_API$4, $xqrD$var$SELECTOR_DATA_TOGGLE$4, function (event) {\n  // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n  if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {\n    event.preventDefault();\n  }\n\n  const selector = $xqrD$var$getSelectorFromElement(this);\n  const selectorElements = $xqrD$var$SelectorEngine.find(selector);\n  selectorElements.forEach(element => {\n    $xqrD$export$Collapse.getOrCreateInstance(element, {\n      toggle: false\n    }).toggle();\n  });\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Collapse to jQuery only if jQuery is present\n */\n\n$xqrD$var$defineJQueryPlugin($xqrD$export$Collapse);\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): dropdown.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst $xqrD$var$NAME$9 = 'dropdown';\nconst $xqrD$var$DATA_KEY$8 = 'bs.dropdown';\nconst $xqrD$var$EVENT_KEY$8 = `.${$xqrD$var$DATA_KEY$8}`;\nconst $xqrD$var$DATA_API_KEY$4 = '.data-api';\nconst $xqrD$var$ESCAPE_KEY$2 = 'Escape';\nconst $xqrD$var$SPACE_KEY = 'Space';\nconst $xqrD$var$TAB_KEY$1 = 'Tab';\nconst $xqrD$var$ARROW_UP_KEY = 'ArrowUp';\nconst $xqrD$var$ARROW_DOWN_KEY = 'ArrowDown';\nconst $xqrD$var$RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button\n\nconst $xqrD$var$REGEXP_KEYDOWN = new RegExp(`${$xqrD$var$ARROW_UP_KEY}|${$xqrD$var$ARROW_DOWN_KEY}|${$xqrD$var$ESCAPE_KEY$2}`);\nconst $xqrD$var$EVENT_HIDE$4 = `hide${$xqrD$var$EVENT_KEY$8}`;\nconst $xqrD$var$EVENT_HIDDEN$4 = `hidden${$xqrD$var$EVENT_KEY$8}`;\nconst $xqrD$var$EVENT_SHOW$4 = `show${$xqrD$var$EVENT_KEY$8}`;\nconst $xqrD$var$EVENT_SHOWN$4 = `shown${$xqrD$var$EVENT_KEY$8}`;\nconst $xqrD$var$EVENT_CLICK_DATA_API$3 = `click${$xqrD$var$EVENT_KEY$8}${$xqrD$var$DATA_API_KEY$4}`;\nconst $xqrD$var$EVENT_KEYDOWN_DATA_API = `keydown${$xqrD$var$EVENT_KEY$8}${$xqrD$var$DATA_API_KEY$4}`;\nconst $xqrD$var$EVENT_KEYUP_DATA_API = `keyup${$xqrD$var$EVENT_KEY$8}${$xqrD$var$DATA_API_KEY$4}`;\nconst $xqrD$var$CLASS_NAME_SHOW$6 = 'show';\nconst $xqrD$var$CLASS_NAME_DROPUP = 'dropup';\nconst $xqrD$var$CLASS_NAME_DROPEND = 'dropend';\nconst $xqrD$var$CLASS_NAME_DROPSTART = 'dropstart';\nconst $xqrD$var$CLASS_NAME_NAVBAR = 'navbar';\nconst $xqrD$var$SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle=\"dropdown\"]';\nconst $xqrD$var$SELECTOR_MENU = '.dropdown-menu';\nconst $xqrD$var$SELECTOR_NAVBAR_NAV = '.navbar-nav';\nconst $xqrD$var$SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';\nconst $xqrD$var$PLACEMENT_TOP = $xqrD$var$isRTL() ? 'top-end' : 'top-start';\nconst $xqrD$var$PLACEMENT_TOPEND = $xqrD$var$isRTL() ? 'top-start' : 'top-end';\nconst $xqrD$var$PLACEMENT_BOTTOM = $xqrD$var$isRTL() ? 'bottom-end' : 'bottom-start';\nconst $xqrD$var$PLACEMENT_BOTTOMEND = $xqrD$var$isRTL() ? 'bottom-start' : 'bottom-end';\nconst $xqrD$var$PLACEMENT_RIGHT = $xqrD$var$isRTL() ? 'left-start' : 'right-start';\nconst $xqrD$var$PLACEMENT_LEFT = $xqrD$var$isRTL() ? 'right-start' : 'left-start';\nconst $xqrD$var$Default$8 = {\n  offset: [0, 2],\n  boundary: 'clippingParents',\n  reference: 'toggle',\n  display: 'dynamic',\n  popperConfig: null,\n  autoClose: true\n};\nconst $xqrD$var$DefaultType$8 = {\n  offset: '(array|string|function)',\n  boundary: '(string|element)',\n  reference: '(string|element|object)',\n  display: 'string',\n  popperConfig: '(null|object|function)',\n  autoClose: '(boolean|string)'\n};\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass $xqrD$export$Dropdown extends $xqrD$var$BaseComponent {\n  constructor(element, config) {\n    super(element);\n    this._popper = null;\n    this._config = this._getConfig(config);\n    this._menu = this._getMenuElement();\n    this._inNavbar = this._detectNavbar();\n  } // Getters\n\n\n  static get Default() {\n    return $xqrD$var$Default$8;\n  }\n\n  static get DefaultType() {\n    return $xqrD$var$DefaultType$8;\n  }\n\n  static get NAME() {\n    return $xqrD$var$NAME$9;\n  } // Public\n\n\n  toggle() {\n    return this._isShown() ? this.hide() : this.show();\n  }\n\n  show() {\n    if ($xqrD$var$isDisabled(this._element) || this._isShown(this._menu)) {\n      return;\n    }\n\n    const relatedTarget = {\n      relatedTarget: this._element\n    };\n    const showEvent = $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_SHOW$4, relatedTarget);\n\n    if (showEvent.defaultPrevented) {\n      return;\n    }\n\n    const parent = $xqrD$export$Dropdown.getParentFromElement(this._element); // Totally disable Popper for Dropdowns in Navbar\n\n    if (this._inNavbar) {\n      $xqrD$var$Manipulator.setDataAttribute(this._menu, 'popper', 'none');\n    } else {\n      this._createPopper(parent);\n    } // If this is a touch-enabled device we add extra\n    // empty mouseover listeners to the body's immediate children;\n    // only needed because of broken event delegation on iOS\n    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n\n    if ('ontouchstart' in document.documentElement && !parent.closest($xqrD$var$SELECTOR_NAVBAR_NAV)) {\n      [].concat(...document.body.children).forEach(elem => $xqrD$var$EventHandler.on(elem, 'mouseover', $xqrD$var$noop));\n    }\n\n    this._element.focus();\n\n    this._element.setAttribute('aria-expanded', true);\n\n    this._menu.classList.add($xqrD$var$CLASS_NAME_SHOW$6);\n\n    this._element.classList.add($xqrD$var$CLASS_NAME_SHOW$6);\n\n    $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_SHOWN$4, relatedTarget);\n  }\n\n  hide() {\n    if ($xqrD$var$isDisabled(this._element) || !this._isShown(this._menu)) {\n      return;\n    }\n\n    const relatedTarget = {\n      relatedTarget: this._element\n    };\n\n    this._completeHide(relatedTarget);\n  }\n\n  dispose() {\n    if (this._popper) {\n      this._popper.destroy();\n    }\n\n    super.dispose();\n  }\n\n  update() {\n    this._inNavbar = this._detectNavbar();\n\n    if (this._popper) {\n      this._popper.update();\n    }\n  } // Private\n\n\n  _completeHide(relatedTarget) {\n    const hideEvent = $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_HIDE$4, relatedTarget);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    } // If this is a touch-enabled device we remove the extra\n    // empty mouseover listeners we added for iOS support\n\n\n    if ('ontouchstart' in document.documentElement) {\n      [].concat(...document.body.children).forEach(elem => $xqrD$var$EventHandler.off(elem, 'mouseover', $xqrD$var$noop));\n    }\n\n    if (this._popper) {\n      this._popper.destroy();\n    }\n\n    this._menu.classList.remove($xqrD$var$CLASS_NAME_SHOW$6);\n\n    this._element.classList.remove($xqrD$var$CLASS_NAME_SHOW$6);\n\n    this._element.setAttribute('aria-expanded', 'false');\n\n    $xqrD$var$Manipulator.removeDataAttribute(this._menu, 'popper');\n    $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_HIDDEN$4, relatedTarget);\n  }\n\n  _getConfig(config) {\n    config = { ...this.constructor.Default,\n      ...$xqrD$var$Manipulator.getDataAttributes(this._element),\n      ...config\n    };\n    $xqrD$var$typeCheckConfig($xqrD$var$NAME$9, config, this.constructor.DefaultType);\n\n    if (typeof config.reference === 'object' && !$xqrD$var$isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {\n      // Popper virtual elements require a getBoundingClientRect method\n      throw new TypeError(`${$xqrD$var$NAME$9.toUpperCase()}: Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.`);\n    }\n\n    return config;\n  }\n\n  _createPopper(parent) {\n    if (typeof $xqrD$import$Popper === 'undefined') {\n      throw new TypeError('Bootstrap\\'s dropdowns require Popper (https://popper.js.org)');\n    }\n\n    let referenceElement = this._element;\n\n    if (this._config.reference === 'parent') {\n      referenceElement = parent;\n    } else if ($xqrD$var$isElement(this._config.reference)) {\n      referenceElement = $xqrD$var$getElement(this._config.reference);\n    } else if (typeof this._config.reference === 'object') {\n      referenceElement = this._config.reference;\n    }\n\n    const popperConfig = this._getPopperConfig();\n\n    const isDisplayStatic = popperConfig.modifiers.find(modifier => modifier.name === 'applyStyles' && modifier.enabled === false);\n    this._popper = $xqrD$import$Popper.createPopper(referenceElement, this._menu, popperConfig);\n\n    if (isDisplayStatic) {\n      $xqrD$var$Manipulator.setDataAttribute(this._menu, 'popper', 'static');\n    }\n  }\n\n  _isShown(element = this._element) {\n    return element.classList.contains($xqrD$var$CLASS_NAME_SHOW$6);\n  }\n\n  _getMenuElement() {\n    return $xqrD$var$SelectorEngine.next(this._element, $xqrD$var$SELECTOR_MENU)[0];\n  }\n\n  _getPlacement() {\n    const parentDropdown = this._element.parentNode;\n\n    if (parentDropdown.classList.contains($xqrD$var$CLASS_NAME_DROPEND)) {\n      return $xqrD$var$PLACEMENT_RIGHT;\n    }\n\n    if (parentDropdown.classList.contains($xqrD$var$CLASS_NAME_DROPSTART)) {\n      return $xqrD$var$PLACEMENT_LEFT;\n    } // We need to trim the value because custom properties can also include spaces\n\n\n    const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';\n\n    if (parentDropdown.classList.contains($xqrD$var$CLASS_NAME_DROPUP)) {\n      return isEnd ? $xqrD$var$PLACEMENT_TOPEND : $xqrD$var$PLACEMENT_TOP;\n    }\n\n    return isEnd ? $xqrD$var$PLACEMENT_BOTTOMEND : $xqrD$var$PLACEMENT_BOTTOM;\n  }\n\n  _detectNavbar() {\n    return this._element.closest(`.${$xqrD$var$CLASS_NAME_NAVBAR}`) !== null;\n  }\n\n  _getOffset() {\n    const {\n      offset\n    } = this._config;\n\n    if (typeof offset === 'string') {\n      return offset.split(',').map(val => Number.parseInt(val, 10));\n    }\n\n    if (typeof offset === 'function') {\n      return popperData => offset(popperData, this._element);\n    }\n\n    return offset;\n  }\n\n  _getPopperConfig() {\n    const defaultBsPopperConfig = {\n      placement: this._getPlacement(),\n      modifiers: [{\n        name: 'preventOverflow',\n        options: {\n          boundary: this._config.boundary\n        }\n      }, {\n        name: 'offset',\n        options: {\n          offset: this._getOffset()\n        }\n      }]\n    }; // Disable Popper if we have a static display\n\n    if (this._config.display === 'static') {\n      defaultBsPopperConfig.modifiers = [{\n        name: 'applyStyles',\n        enabled: false\n      }];\n    }\n\n    return { ...defaultBsPopperConfig,\n      ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)\n    };\n  }\n\n  _selectMenuItem({\n    key,\n    target\n  }) {\n    const items = $xqrD$var$SelectorEngine.find($xqrD$var$SELECTOR_VISIBLE_ITEMS, this._menu).filter($xqrD$var$isVisible);\n\n    if (!items.length) {\n      return;\n    } // if target isn't included in items (e.g. when expanding the dropdown)\n    // allow cycling to get the last item in case key equals ARROW_UP_KEY\n\n\n    $xqrD$var$getNextActiveElement(items, target, key === $xqrD$var$ARROW_DOWN_KEY, !items.includes(target)).focus();\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = $xqrD$export$Dropdown.getOrCreateInstance(this, config);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config]();\n    });\n  }\n\n  static clearMenus(event) {\n    if (event && (event.button === $xqrD$var$RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== $xqrD$var$TAB_KEY$1)) {\n      return;\n    }\n\n    const toggles = $xqrD$var$SelectorEngine.find($xqrD$var$SELECTOR_DATA_TOGGLE$3);\n\n    for (let i = 0, len = toggles.length; i < len; i++) {\n      const context = $xqrD$export$Dropdown.getInstance(toggles[i]);\n\n      if (!context || context._config.autoClose === false) {\n        continue;\n      }\n\n      if (!context._isShown()) {\n        continue;\n      }\n\n      const relatedTarget = {\n        relatedTarget: context._element\n      };\n\n      if (event) {\n        const composedPath = event.composedPath();\n        const isMenuTarget = composedPath.includes(context._menu);\n\n        if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {\n          continue;\n        } // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu\n\n\n        if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === $xqrD$var$TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {\n          continue;\n        }\n\n        if (event.type === 'click') {\n          relatedTarget.clickEvent = event;\n        }\n      }\n\n      context._completeHide(relatedTarget);\n    }\n  }\n\n  static getParentFromElement(element) {\n    return $xqrD$var$getElementFromSelector(element) || element.parentNode;\n  }\n\n  static dataApiKeydownHandler(event) {\n    // If not input/textarea:\n    //  - And not a key in REGEXP_KEYDOWN => not a dropdown command\n    // If input/textarea:\n    //  - If space key => not a dropdown command\n    //  - If key is other than escape\n    //    - If key is not up or down => not a dropdown command\n    //    - If trigger inside the menu => not a dropdown command\n    if (/input|textarea/i.test(event.target.tagName) ? event.key === $xqrD$var$SPACE_KEY || event.key !== $xqrD$var$ESCAPE_KEY$2 && (event.key !== $xqrD$var$ARROW_DOWN_KEY && event.key !== $xqrD$var$ARROW_UP_KEY || event.target.closest($xqrD$var$SELECTOR_MENU)) : !$xqrD$var$REGEXP_KEYDOWN.test(event.key)) {\n      return;\n    }\n\n    const isActive = this.classList.contains($xqrD$var$CLASS_NAME_SHOW$6);\n\n    if (!isActive && event.key === $xqrD$var$ESCAPE_KEY$2) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    if ($xqrD$var$isDisabled(this)) {\n      return;\n    }\n\n    const getToggleButton = this.matches($xqrD$var$SELECTOR_DATA_TOGGLE$3) ? this : $xqrD$var$SelectorEngine.prev(this, $xqrD$var$SELECTOR_DATA_TOGGLE$3)[0];\n    const instance = $xqrD$export$Dropdown.getOrCreateInstance(getToggleButton);\n\n    if (event.key === $xqrD$var$ESCAPE_KEY$2) {\n      instance.hide();\n      return;\n    }\n\n    if (event.key === $xqrD$var$ARROW_UP_KEY || event.key === $xqrD$var$ARROW_DOWN_KEY) {\n      if (!isActive) {\n        instance.show();\n      }\n\n      instance._selectMenuItem(event);\n\n      return;\n    }\n\n    if (!isActive || event.key === $xqrD$var$SPACE_KEY) {\n      $xqrD$export$Dropdown.clearMenus();\n    }\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$xqrD$var$EventHandler.on(document, $xqrD$var$EVENT_KEYDOWN_DATA_API, $xqrD$var$SELECTOR_DATA_TOGGLE$3, $xqrD$export$Dropdown.dataApiKeydownHandler);\n$xqrD$var$EventHandler.on(document, $xqrD$var$EVENT_KEYDOWN_DATA_API, $xqrD$var$SELECTOR_MENU, $xqrD$export$Dropdown.dataApiKeydownHandler);\n$xqrD$var$EventHandler.on(document, $xqrD$var$EVENT_CLICK_DATA_API$3, $xqrD$export$Dropdown.clearMenus);\n$xqrD$var$EventHandler.on(document, $xqrD$var$EVENT_KEYUP_DATA_API, $xqrD$export$Dropdown.clearMenus);\n$xqrD$var$EventHandler.on(document, $xqrD$var$EVENT_CLICK_DATA_API$3, $xqrD$var$SELECTOR_DATA_TOGGLE$3, function (event) {\n  event.preventDefault();\n  $xqrD$export$Dropdown.getOrCreateInstance(this).toggle();\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Dropdown to jQuery only if jQuery is present\n */\n\n$xqrD$var$defineJQueryPlugin($xqrD$export$Dropdown);\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): util/scrollBar.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst $xqrD$var$SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';\nconst $xqrD$var$SELECTOR_STICKY_CONTENT = '.sticky-top';\n\nclass $xqrD$var$ScrollBarHelper {\n  constructor() {\n    this._element = document.body;\n  }\n\n  getWidth() {\n    // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n    const documentWidth = document.documentElement.clientWidth;\n    return Math.abs(window.innerWidth - documentWidth);\n  }\n\n  hide() {\n    const width = this.getWidth();\n\n    this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width\n\n\n    this._setElementAttributes(this._element, 'paddingRight', calculatedValue => calculatedValue + width); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth\n\n\n    this._setElementAttributes($xqrD$var$SELECTOR_FIXED_CONTENT, 'paddingRight', calculatedValue => calculatedValue + width);\n\n    this._setElementAttributes($xqrD$var$SELECTOR_STICKY_CONTENT, 'marginRight', calculatedValue => calculatedValue - width);\n  }\n\n  _disableOverFlow() {\n    this._saveInitialAttribute(this._element, 'overflow');\n\n    this._element.style.overflow = 'hidden';\n  }\n\n  _setElementAttributes(selector, styleProp, callback) {\n    const scrollbarWidth = this.getWidth();\n\n    const manipulationCallBack = element => {\n      if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {\n        return;\n      }\n\n      this._saveInitialAttribute(element, styleProp);\n\n      const calculatedValue = window.getComputedStyle(element)[styleProp];\n      element.style[styleProp] = `${callback(Number.parseFloat(calculatedValue))}px`;\n    };\n\n    this._applyManipulationCallback(selector, manipulationCallBack);\n  }\n\n  reset() {\n    this._resetElementAttributes(this._element, 'overflow');\n\n    this._resetElementAttributes(this._element, 'paddingRight');\n\n    this._resetElementAttributes($xqrD$var$SELECTOR_FIXED_CONTENT, 'paddingRight');\n\n    this._resetElementAttributes($xqrD$var$SELECTOR_STICKY_CONTENT, 'marginRight');\n  }\n\n  _saveInitialAttribute(element, styleProp) {\n    const actualValue = element.style[styleProp];\n\n    if (actualValue) {\n      $xqrD$var$Manipulator.setDataAttribute(element, styleProp, actualValue);\n    }\n  }\n\n  _resetElementAttributes(selector, styleProp) {\n    const manipulationCallBack = element => {\n      const value = $xqrD$var$Manipulator.getDataAttribute(element, styleProp);\n\n      if (typeof value === 'undefined') {\n        element.style.removeProperty(styleProp);\n      } else {\n        $xqrD$var$Manipulator.removeDataAttribute(element, styleProp);\n        element.style[styleProp] = value;\n      }\n    };\n\n    this._applyManipulationCallback(selector, manipulationCallBack);\n  }\n\n  _applyManipulationCallback(selector, callBack) {\n    if ($xqrD$var$isElement(selector)) {\n      callBack(selector);\n    } else {\n      $xqrD$var$SelectorEngine.find(selector, this._element).forEach(callBack);\n    }\n  }\n\n  isOverflowing() {\n    return this.getWidth() > 0;\n  }\n\n}\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): util/backdrop.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n\nconst $xqrD$var$Default$7 = {\n  className: 'modal-backdrop',\n  isVisible: true,\n  // if false, we use the backdrop helper without adding any element to the dom\n  isAnimated: false,\n  rootElement: 'body',\n  // give the choice to place backdrop under different elements\n  clickCallback: null\n};\nconst $xqrD$var$DefaultType$7 = {\n  className: 'string',\n  isVisible: 'boolean',\n  isAnimated: 'boolean',\n  rootElement: '(element|string)',\n  clickCallback: '(function|null)'\n};\nconst $xqrD$var$NAME$8 = 'backdrop';\nconst $xqrD$var$CLASS_NAME_FADE$4 = 'fade';\nconst $xqrD$var$CLASS_NAME_SHOW$5 = 'show';\nconst $xqrD$var$EVENT_MOUSEDOWN = `mousedown.bs.${$xqrD$var$NAME$8}`;\n\nclass $xqrD$var$Backdrop {\n  constructor(config) {\n    this._config = this._getConfig(config);\n    this._isAppended = false;\n    this._element = null;\n  }\n\n  show(callback) {\n    if (!this._config.isVisible) {\n      $xqrD$var$execute(callback);\n      return;\n    }\n\n    this._append();\n\n    if (this._config.isAnimated) {\n      $xqrD$var$reflow(this._getElement());\n    }\n\n    this._getElement().classList.add($xqrD$var$CLASS_NAME_SHOW$5);\n\n    this._emulateAnimation(() => {\n      $xqrD$var$execute(callback);\n    });\n  }\n\n  hide(callback) {\n    if (!this._config.isVisible) {\n      $xqrD$var$execute(callback);\n      return;\n    }\n\n    this._getElement().classList.remove($xqrD$var$CLASS_NAME_SHOW$5);\n\n    this._emulateAnimation(() => {\n      this.dispose();\n      $xqrD$var$execute(callback);\n    });\n  } // Private\n\n\n  _getElement() {\n    if (!this._element) {\n      const backdrop = document.createElement('div');\n      backdrop.className = this._config.className;\n\n      if (this._config.isAnimated) {\n        backdrop.classList.add($xqrD$var$CLASS_NAME_FADE$4);\n      }\n\n      this._element = backdrop;\n    }\n\n    return this._element;\n  }\n\n  _getConfig(config) {\n    config = { ...$xqrD$var$Default$7,\n      ...(typeof config === 'object' ? config : {})\n    }; // use getElement() with the default \"body\" to get a fresh Element on each instantiation\n\n    config.rootElement = $xqrD$var$getElement(config.rootElement);\n    $xqrD$var$typeCheckConfig($xqrD$var$NAME$8, config, $xqrD$var$DefaultType$7);\n    return config;\n  }\n\n  _append() {\n    if (this._isAppended) {\n      return;\n    }\n\n    this._config.rootElement.append(this._getElement());\n\n    $xqrD$var$EventHandler.on(this._getElement(), $xqrD$var$EVENT_MOUSEDOWN, () => {\n      $xqrD$var$execute(this._config.clickCallback);\n    });\n    this._isAppended = true;\n  }\n\n  dispose() {\n    if (!this._isAppended) {\n      return;\n    }\n\n    $xqrD$var$EventHandler.off(this._element, $xqrD$var$EVENT_MOUSEDOWN);\n\n    this._element.remove();\n\n    this._isAppended = false;\n  }\n\n  _emulateAnimation(callback) {\n    $xqrD$var$executeAfterTransition(callback, this._getElement(), this._config.isAnimated);\n  }\n\n}\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): util/focustrap.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n\nconst $xqrD$var$Default$6 = {\n  trapElement: null,\n  // The element to trap focus inside of\n  autofocus: true\n};\nconst $xqrD$var$DefaultType$6 = {\n  trapElement: 'element',\n  autofocus: 'boolean'\n};\nconst $xqrD$var$NAME$7 = 'focustrap';\nconst $xqrD$var$DATA_KEY$7 = 'bs.focustrap';\nconst $xqrD$var$EVENT_KEY$7 = `.${$xqrD$var$DATA_KEY$7}`;\nconst $xqrD$var$EVENT_FOCUSIN$1 = `focusin${$xqrD$var$EVENT_KEY$7}`;\nconst $xqrD$var$EVENT_KEYDOWN_TAB = `keydown.tab${$xqrD$var$EVENT_KEY$7}`;\nconst $xqrD$var$TAB_KEY = 'Tab';\nconst $xqrD$var$TAB_NAV_FORWARD = 'forward';\nconst $xqrD$var$TAB_NAV_BACKWARD = 'backward';\n\nclass $xqrD$var$FocusTrap {\n  constructor(config) {\n    this._config = this._getConfig(config);\n    this._isActive = false;\n    this._lastTabNavDirection = null;\n  }\n\n  activate() {\n    const {\n      trapElement,\n      autofocus\n    } = this._config;\n\n    if (this._isActive) {\n      return;\n    }\n\n    if (autofocus) {\n      trapElement.focus();\n    }\n\n    $xqrD$var$EventHandler.off(document, $xqrD$var$EVENT_KEY$7); // guard against infinite focus loop\n\n    $xqrD$var$EventHandler.on(document, $xqrD$var$EVENT_FOCUSIN$1, event => this._handleFocusin(event));\n    $xqrD$var$EventHandler.on(document, $xqrD$var$EVENT_KEYDOWN_TAB, event => this._handleKeydown(event));\n    this._isActive = true;\n  }\n\n  deactivate() {\n    if (!this._isActive) {\n      return;\n    }\n\n    this._isActive = false;\n    $xqrD$var$EventHandler.off(document, $xqrD$var$EVENT_KEY$7);\n  } // Private\n\n\n  _handleFocusin(event) {\n    const {\n      target\n    } = event;\n    const {\n      trapElement\n    } = this._config;\n\n    if (target === document || target === trapElement || trapElement.contains(target)) {\n      return;\n    }\n\n    const elements = $xqrD$var$SelectorEngine.focusableChildren(trapElement);\n\n    if (elements.length === 0) {\n      trapElement.focus();\n    } else if (this._lastTabNavDirection === $xqrD$var$TAB_NAV_BACKWARD) {\n      elements[elements.length - 1].focus();\n    } else {\n      elements[0].focus();\n    }\n  }\n\n  _handleKeydown(event) {\n    if (event.key !== $xqrD$var$TAB_KEY) {\n      return;\n    }\n\n    this._lastTabNavDirection = event.shiftKey ? $xqrD$var$TAB_NAV_BACKWARD : $xqrD$var$TAB_NAV_FORWARD;\n  }\n\n  _getConfig(config) {\n    config = { ...$xqrD$var$Default$6,\n      ...(typeof config === 'object' ? config : {})\n    };\n    $xqrD$var$typeCheckConfig($xqrD$var$NAME$7, config, $xqrD$var$DefaultType$6);\n    return config;\n  }\n\n}\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): modal.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\n\nconst $xqrD$var$NAME$6 = 'modal';\nconst $xqrD$var$DATA_KEY$6 = 'bs.modal';\nconst $xqrD$var$EVENT_KEY$6 = `.${$xqrD$var$DATA_KEY$6}`;\nconst $xqrD$var$DATA_API_KEY$3 = '.data-api';\nconst $xqrD$var$ESCAPE_KEY$1 = 'Escape';\nconst $xqrD$var$Default$5 = {\n  backdrop: true,\n  keyboard: true,\n  focus: true\n};\nconst $xqrD$var$DefaultType$5 = {\n  backdrop: '(boolean|string)',\n  keyboard: 'boolean',\n  focus: 'boolean'\n};\nconst $xqrD$var$EVENT_HIDE$3 = `hide${$xqrD$var$EVENT_KEY$6}`;\nconst $xqrD$var$EVENT_HIDE_PREVENTED = `hidePrevented${$xqrD$var$EVENT_KEY$6}`;\nconst $xqrD$var$EVENT_HIDDEN$3 = `hidden${$xqrD$var$EVENT_KEY$6}`;\nconst $xqrD$var$EVENT_SHOW$3 = `show${$xqrD$var$EVENT_KEY$6}`;\nconst $xqrD$var$EVENT_SHOWN$3 = `shown${$xqrD$var$EVENT_KEY$6}`;\nconst $xqrD$var$EVENT_RESIZE = `resize${$xqrD$var$EVENT_KEY$6}`;\nconst $xqrD$var$EVENT_CLICK_DISMISS = `click.dismiss${$xqrD$var$EVENT_KEY$6}`;\nconst $xqrD$var$EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${$xqrD$var$EVENT_KEY$6}`;\nconst $xqrD$var$EVENT_MOUSEUP_DISMISS = `mouseup.dismiss${$xqrD$var$EVENT_KEY$6}`;\nconst $xqrD$var$EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${$xqrD$var$EVENT_KEY$6}`;\nconst $xqrD$var$EVENT_CLICK_DATA_API$2 = `click${$xqrD$var$EVENT_KEY$6}${$xqrD$var$DATA_API_KEY$3}`;\nconst $xqrD$var$CLASS_NAME_OPEN = 'modal-open';\nconst $xqrD$var$CLASS_NAME_FADE$3 = 'fade';\nconst $xqrD$var$CLASS_NAME_SHOW$4 = 'show';\nconst $xqrD$var$CLASS_NAME_STATIC = 'modal-static';\nconst $xqrD$var$OPEN_SELECTOR$1 = '.modal.show';\nconst $xqrD$var$SELECTOR_DIALOG = '.modal-dialog';\nconst $xqrD$var$SELECTOR_MODAL_BODY = '.modal-body';\nconst $xqrD$var$SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle=\"modal\"]';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass $xqrD$export$Modal extends $xqrD$var$BaseComponent {\n  constructor(element, config) {\n    super(element);\n    this._config = this._getConfig(config);\n    this._dialog = $xqrD$var$SelectorEngine.findOne($xqrD$var$SELECTOR_DIALOG, this._element);\n    this._backdrop = this._initializeBackDrop();\n    this._focustrap = this._initializeFocusTrap();\n    this._isShown = false;\n    this._ignoreBackdropClick = false;\n    this._isTransitioning = false;\n    this._scrollBar = new $xqrD$var$ScrollBarHelper();\n  } // Getters\n\n\n  static get Default() {\n    return $xqrD$var$Default$5;\n  }\n\n  static get NAME() {\n    return $xqrD$var$NAME$6;\n  } // Public\n\n\n  toggle(relatedTarget) {\n    return this._isShown ? this.hide() : this.show(relatedTarget);\n  }\n\n  show(relatedTarget) {\n    if (this._isShown || this._isTransitioning) {\n      return;\n    }\n\n    const showEvent = $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_SHOW$3, {\n      relatedTarget\n    });\n\n    if (showEvent.defaultPrevented) {\n      return;\n    }\n\n    this._isShown = true;\n\n    if (this._isAnimated()) {\n      this._isTransitioning = true;\n    }\n\n    this._scrollBar.hide();\n\n    document.body.classList.add($xqrD$var$CLASS_NAME_OPEN);\n\n    this._adjustDialog();\n\n    this._setEscapeEvent();\n\n    this._setResizeEvent();\n\n    $xqrD$var$EventHandler.on(this._dialog, $xqrD$var$EVENT_MOUSEDOWN_DISMISS, () => {\n      $xqrD$var$EventHandler.one(this._element, $xqrD$var$EVENT_MOUSEUP_DISMISS, event => {\n        if (event.target === this._element) {\n          this._ignoreBackdropClick = true;\n        }\n      });\n    });\n\n    this._showBackdrop(() => this._showElement(relatedTarget));\n  }\n\n  hide() {\n    if (!this._isShown || this._isTransitioning) {\n      return;\n    }\n\n    const hideEvent = $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_HIDE$3);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    this._isShown = false;\n\n    const isAnimated = this._isAnimated();\n\n    if (isAnimated) {\n      this._isTransitioning = true;\n    }\n\n    this._setEscapeEvent();\n\n    this._setResizeEvent();\n\n    this._focustrap.deactivate();\n\n    this._element.classList.remove($xqrD$var$CLASS_NAME_SHOW$4);\n\n    $xqrD$var$EventHandler.off(this._element, $xqrD$var$EVENT_CLICK_DISMISS);\n    $xqrD$var$EventHandler.off(this._dialog, $xqrD$var$EVENT_MOUSEDOWN_DISMISS);\n\n    this._queueCallback(() => this._hideModal(), this._element, isAnimated);\n  }\n\n  dispose() {\n    [window, this._dialog].forEach(htmlElement => $xqrD$var$EventHandler.off(htmlElement, $xqrD$var$EVENT_KEY$6));\n\n    this._backdrop.dispose();\n\n    this._focustrap.deactivate();\n\n    super.dispose();\n  }\n\n  handleUpdate() {\n    this._adjustDialog();\n  } // Private\n\n\n  _initializeBackDrop() {\n    return new $xqrD$var$Backdrop({\n      isVisible: Boolean(this._config.backdrop),\n      // 'static' option will be translated to true, and booleans will keep their value\n      isAnimated: this._isAnimated()\n    });\n  }\n\n  _initializeFocusTrap() {\n    return new $xqrD$var$FocusTrap({\n      trapElement: this._element\n    });\n  }\n\n  _getConfig(config) {\n    config = { ...$xqrD$var$Default$5,\n      ...$xqrD$var$Manipulator.getDataAttributes(this._element),\n      ...(typeof config === 'object' ? config : {})\n    };\n    $xqrD$var$typeCheckConfig($xqrD$var$NAME$6, config, $xqrD$var$DefaultType$5);\n    return config;\n  }\n\n  _showElement(relatedTarget) {\n    const isAnimated = this._isAnimated();\n\n    const modalBody = $xqrD$var$SelectorEngine.findOne($xqrD$var$SELECTOR_MODAL_BODY, this._dialog);\n\n    if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {\n      // Don't move modal's DOM position\n      document.body.append(this._element);\n    }\n\n    this._element.style.display = 'block';\n\n    this._element.removeAttribute('aria-hidden');\n\n    this._element.setAttribute('aria-modal', true);\n\n    this._element.setAttribute('role', 'dialog');\n\n    this._element.scrollTop = 0;\n\n    if (modalBody) {\n      modalBody.scrollTop = 0;\n    }\n\n    if (isAnimated) {\n      $xqrD$var$reflow(this._element);\n    }\n\n    this._element.classList.add($xqrD$var$CLASS_NAME_SHOW$4);\n\n    const transitionComplete = () => {\n      if (this._config.focus) {\n        this._focustrap.activate();\n      }\n\n      this._isTransitioning = false;\n      $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_SHOWN$3, {\n        relatedTarget\n      });\n    };\n\n    this._queueCallback(transitionComplete, this._dialog, isAnimated);\n  }\n\n  _setEscapeEvent() {\n    if (this._isShown) {\n      $xqrD$var$EventHandler.on(this._element, $xqrD$var$EVENT_KEYDOWN_DISMISS$1, event => {\n        if (this._config.keyboard && event.key === $xqrD$var$ESCAPE_KEY$1) {\n          event.preventDefault();\n          this.hide();\n        } else if (!this._config.keyboard && event.key === $xqrD$var$ESCAPE_KEY$1) {\n          this._triggerBackdropTransition();\n        }\n      });\n    } else {\n      $xqrD$var$EventHandler.off(this._element, $xqrD$var$EVENT_KEYDOWN_DISMISS$1);\n    }\n  }\n\n  _setResizeEvent() {\n    if (this._isShown) {\n      $xqrD$var$EventHandler.on(window, $xqrD$var$EVENT_RESIZE, () => this._adjustDialog());\n    } else {\n      $xqrD$var$EventHandler.off(window, $xqrD$var$EVENT_RESIZE);\n    }\n  }\n\n  _hideModal() {\n    this._element.style.display = 'none';\n\n    this._element.setAttribute('aria-hidden', true);\n\n    this._element.removeAttribute('aria-modal');\n\n    this._element.removeAttribute('role');\n\n    this._isTransitioning = false;\n\n    this._backdrop.hide(() => {\n      document.body.classList.remove($xqrD$var$CLASS_NAME_OPEN);\n\n      this._resetAdjustments();\n\n      this._scrollBar.reset();\n\n      $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_HIDDEN$3);\n    });\n  }\n\n  _showBackdrop(callback) {\n    $xqrD$var$EventHandler.on(this._element, $xqrD$var$EVENT_CLICK_DISMISS, event => {\n      if (this._ignoreBackdropClick) {\n        this._ignoreBackdropClick = false;\n        return;\n      }\n\n      if (event.target !== event.currentTarget) {\n        return;\n      }\n\n      if (this._config.backdrop === true) {\n        this.hide();\n      } else if (this._config.backdrop === 'static') {\n        this._triggerBackdropTransition();\n      }\n    });\n\n    this._backdrop.show(callback);\n  }\n\n  _isAnimated() {\n    return this._element.classList.contains($xqrD$var$CLASS_NAME_FADE$3);\n  }\n\n  _triggerBackdropTransition() {\n    const hideEvent = $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_HIDE_PREVENTED);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    const {\n      classList,\n      scrollHeight,\n      style\n    } = this._element;\n    const isModalOverflowing = scrollHeight > document.documentElement.clientHeight; // return if the following background transition hasn't yet completed\n\n    if (!isModalOverflowing && style.overflowY === 'hidden' || classList.contains($xqrD$var$CLASS_NAME_STATIC)) {\n      return;\n    }\n\n    if (!isModalOverflowing) {\n      style.overflowY = 'hidden';\n    }\n\n    classList.add($xqrD$var$CLASS_NAME_STATIC);\n\n    this._queueCallback(() => {\n      classList.remove($xqrD$var$CLASS_NAME_STATIC);\n\n      if (!isModalOverflowing) {\n        this._queueCallback(() => {\n          style.overflowY = '';\n        }, this._dialog);\n      }\n    }, this._dialog);\n\n    this._element.focus();\n  } // ----------------------------------------------------------------------\n  // the following methods are used to handle overflowing modals\n  // ----------------------------------------------------------------------\n\n\n  _adjustDialog() {\n    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n\n    const scrollbarWidth = this._scrollBar.getWidth();\n\n    const isBodyOverflowing = scrollbarWidth > 0;\n\n    if (!isBodyOverflowing && isModalOverflowing && !$xqrD$var$isRTL() || isBodyOverflowing && !isModalOverflowing && $xqrD$var$isRTL()) {\n      this._element.style.paddingLeft = `${scrollbarWidth}px`;\n    }\n\n    if (isBodyOverflowing && !isModalOverflowing && !$xqrD$var$isRTL() || !isBodyOverflowing && isModalOverflowing && $xqrD$var$isRTL()) {\n      this._element.style.paddingRight = `${scrollbarWidth}px`;\n    }\n  }\n\n  _resetAdjustments() {\n    this._element.style.paddingLeft = '';\n    this._element.style.paddingRight = '';\n  } // Static\n\n\n  static jQueryInterface(config, relatedTarget) {\n    return this.each(function () {\n      const data = $xqrD$export$Modal.getOrCreateInstance(this, config);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config](relatedTarget);\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$xqrD$var$EventHandler.on(document, $xqrD$var$EVENT_CLICK_DATA_API$2, $xqrD$var$SELECTOR_DATA_TOGGLE$2, function (event) {\n  const target = $xqrD$var$getElementFromSelector(this);\n\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault();\n  }\n\n  $xqrD$var$EventHandler.one(target, $xqrD$var$EVENT_SHOW$3, showEvent => {\n    if (showEvent.defaultPrevented) {\n      // only register focus restorer if modal will actually get shown\n      return;\n    }\n\n    $xqrD$var$EventHandler.one(target, $xqrD$var$EVENT_HIDDEN$3, () => {\n      if ($xqrD$var$isVisible(this)) {\n        this.focus();\n      }\n    });\n  }); // avoid conflict when clicking moddal toggler while another one is open\n\n  const allReadyOpen = $xqrD$var$SelectorEngine.findOne($xqrD$var$OPEN_SELECTOR$1);\n\n  if (allReadyOpen) {\n    $xqrD$export$Modal.getInstance(allReadyOpen).hide();\n  }\n\n  const data = $xqrD$export$Modal.getOrCreateInstance(target);\n  data.toggle(this);\n});\n$xqrD$var$enableDismissTrigger($xqrD$export$Modal);\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Modal to jQuery only if jQuery is present\n */\n\n$xqrD$var$defineJQueryPlugin($xqrD$export$Modal);\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): offcanvas.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst $xqrD$var$NAME$5 = 'offcanvas';\nconst $xqrD$var$DATA_KEY$5 = 'bs.offcanvas';\nconst $xqrD$var$EVENT_KEY$5 = `.${$xqrD$var$DATA_KEY$5}`;\nconst $xqrD$var$DATA_API_KEY$2 = '.data-api';\nconst $xqrD$var$EVENT_LOAD_DATA_API$1 = `load${$xqrD$var$EVENT_KEY$5}${$xqrD$var$DATA_API_KEY$2}`;\nconst $xqrD$var$ESCAPE_KEY = 'Escape';\nconst $xqrD$var$Default$4 = {\n  backdrop: true,\n  keyboard: true,\n  scroll: false\n};\nconst $xqrD$var$DefaultType$4 = {\n  backdrop: 'boolean',\n  keyboard: 'boolean',\n  scroll: 'boolean'\n};\nconst $xqrD$var$CLASS_NAME_SHOW$3 = 'show';\nconst $xqrD$var$CLASS_NAME_BACKDROP = 'offcanvas-backdrop';\nconst $xqrD$var$OPEN_SELECTOR = '.offcanvas.show';\nconst $xqrD$var$EVENT_SHOW$2 = `show${$xqrD$var$EVENT_KEY$5}`;\nconst $xqrD$var$EVENT_SHOWN$2 = `shown${$xqrD$var$EVENT_KEY$5}`;\nconst $xqrD$var$EVENT_HIDE$2 = `hide${$xqrD$var$EVENT_KEY$5}`;\nconst $xqrD$var$EVENT_HIDDEN$2 = `hidden${$xqrD$var$EVENT_KEY$5}`;\nconst $xqrD$var$EVENT_CLICK_DATA_API$1 = `click${$xqrD$var$EVENT_KEY$5}${$xqrD$var$DATA_API_KEY$2}`;\nconst $xqrD$var$EVENT_KEYDOWN_DISMISS = `keydown.dismiss${$xqrD$var$EVENT_KEY$5}`;\nconst $xqrD$var$SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle=\"offcanvas\"]';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass $xqrD$export$Offcanvas extends $xqrD$var$BaseComponent {\n  constructor(element, config) {\n    super(element);\n    this._config = this._getConfig(config);\n    this._isShown = false;\n    this._backdrop = this._initializeBackDrop();\n    this._focustrap = this._initializeFocusTrap();\n\n    this._addEventListeners();\n  } // Getters\n\n\n  static get NAME() {\n    return $xqrD$var$NAME$5;\n  }\n\n  static get Default() {\n    return $xqrD$var$Default$4;\n  } // Public\n\n\n  toggle(relatedTarget) {\n    return this._isShown ? this.hide() : this.show(relatedTarget);\n  }\n\n  show(relatedTarget) {\n    if (this._isShown) {\n      return;\n    }\n\n    const showEvent = $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_SHOW$2, {\n      relatedTarget\n    });\n\n    if (showEvent.defaultPrevented) {\n      return;\n    }\n\n    this._isShown = true;\n    this._element.style.visibility = 'visible';\n\n    this._backdrop.show();\n\n    if (!this._config.scroll) {\n      new $xqrD$var$ScrollBarHelper().hide();\n    }\n\n    this._element.removeAttribute('aria-hidden');\n\n    this._element.setAttribute('aria-modal', true);\n\n    this._element.setAttribute('role', 'dialog');\n\n    this._element.classList.add($xqrD$var$CLASS_NAME_SHOW$3);\n\n    const completeCallBack = () => {\n      if (!this._config.scroll) {\n        this._focustrap.activate();\n      }\n\n      $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_SHOWN$2, {\n        relatedTarget\n      });\n    };\n\n    this._queueCallback(completeCallBack, this._element, true);\n  }\n\n  hide() {\n    if (!this._isShown) {\n      return;\n    }\n\n    const hideEvent = $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_HIDE$2);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    this._focustrap.deactivate();\n\n    this._element.blur();\n\n    this._isShown = false;\n\n    this._element.classList.remove($xqrD$var$CLASS_NAME_SHOW$3);\n\n    this._backdrop.hide();\n\n    const completeCallback = () => {\n      this._element.setAttribute('aria-hidden', true);\n\n      this._element.removeAttribute('aria-modal');\n\n      this._element.removeAttribute('role');\n\n      this._element.style.visibility = 'hidden';\n\n      if (!this._config.scroll) {\n        new $xqrD$var$ScrollBarHelper().reset();\n      }\n\n      $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_HIDDEN$2);\n    };\n\n    this._queueCallback(completeCallback, this._element, true);\n  }\n\n  dispose() {\n    this._backdrop.dispose();\n\n    this._focustrap.deactivate();\n\n    super.dispose();\n  } // Private\n\n\n  _getConfig(config) {\n    config = { ...$xqrD$var$Default$4,\n      ...$xqrD$var$Manipulator.getDataAttributes(this._element),\n      ...(typeof config === 'object' ? config : {})\n    };\n    $xqrD$var$typeCheckConfig($xqrD$var$NAME$5, config, $xqrD$var$DefaultType$4);\n    return config;\n  }\n\n  _initializeBackDrop() {\n    return new $xqrD$var$Backdrop({\n      className: $xqrD$var$CLASS_NAME_BACKDROP,\n      isVisible: this._config.backdrop,\n      isAnimated: true,\n      rootElement: this._element.parentNode,\n      clickCallback: () => this.hide()\n    });\n  }\n\n  _initializeFocusTrap() {\n    return new $xqrD$var$FocusTrap({\n      trapElement: this._element\n    });\n  }\n\n  _addEventListeners() {\n    $xqrD$var$EventHandler.on(this._element, $xqrD$var$EVENT_KEYDOWN_DISMISS, event => {\n      if (this._config.keyboard && event.key === $xqrD$var$ESCAPE_KEY) {\n        this.hide();\n      }\n    });\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = $xqrD$export$Offcanvas.getOrCreateInstance(this, config);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config](this);\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$xqrD$var$EventHandler.on(document, $xqrD$var$EVENT_CLICK_DATA_API$1, $xqrD$var$SELECTOR_DATA_TOGGLE$1, function (event) {\n  const target = $xqrD$var$getElementFromSelector(this);\n\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault();\n  }\n\n  if ($xqrD$var$isDisabled(this)) {\n    return;\n  }\n\n  $xqrD$var$EventHandler.one(target, $xqrD$var$EVENT_HIDDEN$2, () => {\n    // focus on trigger when it is closed\n    if ($xqrD$var$isVisible(this)) {\n      this.focus();\n    }\n  }); // avoid conflict when clicking a toggler of an offcanvas, while another is open\n\n  const allReadyOpen = $xqrD$var$SelectorEngine.findOne($xqrD$var$OPEN_SELECTOR);\n\n  if (allReadyOpen && allReadyOpen !== target) {\n    $xqrD$export$Offcanvas.getInstance(allReadyOpen).hide();\n  }\n\n  const data = $xqrD$export$Offcanvas.getOrCreateInstance(target);\n  data.toggle(this);\n});\n$xqrD$var$EventHandler.on(window, $xqrD$var$EVENT_LOAD_DATA_API$1, () => $xqrD$var$SelectorEngine.find($xqrD$var$OPEN_SELECTOR).forEach(el => $xqrD$export$Offcanvas.getOrCreateInstance(el).show()));\n$xqrD$var$enableDismissTrigger($xqrD$export$Offcanvas);\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$xqrD$var$defineJQueryPlugin($xqrD$export$Offcanvas);\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): util/sanitizer.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst $xqrD$var$uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);\nconst $xqrD$var$ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i;\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n */\n\nconst $xqrD$var$SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;\n/**\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n *\n * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n */\n\nconst $xqrD$var$DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i;\n\nconst $xqrD$var$allowedAttribute = (attribute, allowedAttributeList) => {\n  const attributeName = attribute.nodeName.toLowerCase();\n\n  if (allowedAttributeList.includes(attributeName)) {\n    if ($xqrD$var$uriAttributes.has(attributeName)) {\n      return Boolean($xqrD$var$SAFE_URL_PATTERN.test(attribute.nodeValue) || $xqrD$var$DATA_URL_PATTERN.test(attribute.nodeValue));\n    }\n\n    return true;\n  }\n\n  const regExp = allowedAttributeList.filter(attributeRegex => attributeRegex instanceof RegExp); // Check if a regular expression validates the attribute.\n\n  for (let i = 0, len = regExp.length; i < len; i++) {\n    if (regExp[i].test(attributeName)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst $xqrD$var$DefaultAllowlist = {\n  // Global attributes allowed on any supplied element below.\n  '*': ['class', 'dir', 'id', 'lang', 'role', $xqrD$var$ARIA_ATTRIBUTE_PATTERN],\n  a: ['target', 'href', 'title', 'rel'],\n  area: [],\n  b: [],\n  br: [],\n  col: [],\n  code: [],\n  div: [],\n  em: [],\n  hr: [],\n  h1: [],\n  h2: [],\n  h3: [],\n  h4: [],\n  h5: [],\n  h6: [],\n  i: [],\n  img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n  li: [],\n  ol: [],\n  p: [],\n  pre: [],\n  s: [],\n  small: [],\n  span: [],\n  sub: [],\n  sup: [],\n  strong: [],\n  u: [],\n  ul: []\n};\n\nfunction $xqrD$var$sanitizeHtml(unsafeHtml, allowList, sanitizeFn) {\n  if (!unsafeHtml.length) {\n    return unsafeHtml;\n  }\n\n  if (sanitizeFn && typeof sanitizeFn === 'function') {\n    return sanitizeFn(unsafeHtml);\n  }\n\n  const domParser = new window.DOMParser();\n  const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');\n  const elements = [].concat(...createdDocument.body.querySelectorAll('*'));\n\n  for (let i = 0, len = elements.length; i < len; i++) {\n    const element = elements[i];\n    const elementName = element.nodeName.toLowerCase();\n\n    if (!Object.keys(allowList).includes(elementName)) {\n      element.remove();\n      continue;\n    }\n\n    const attributeList = [].concat(...element.attributes);\n    const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);\n    attributeList.forEach(attribute => {\n      if (!$xqrD$var$allowedAttribute(attribute, allowedAttributes)) {\n        element.removeAttribute(attribute.nodeName);\n      }\n    });\n  }\n\n  return createdDocument.body.innerHTML;\n}\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): tooltip.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\n\nconst $xqrD$var$NAME$4 = 'tooltip';\nconst $xqrD$var$DATA_KEY$4 = 'bs.tooltip';\nconst $xqrD$var$EVENT_KEY$4 = `.${$xqrD$var$DATA_KEY$4}`;\nconst $xqrD$var$CLASS_PREFIX$1 = 'bs-tooltip';\nconst $xqrD$var$DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);\nconst $xqrD$var$DefaultType$3 = {\n  animation: 'boolean',\n  template: 'string',\n  title: '(string|element|function)',\n  trigger: 'string',\n  delay: '(number|object)',\n  html: 'boolean',\n  selector: '(string|boolean)',\n  placement: '(string|function)',\n  offset: '(array|string|function)',\n  container: '(string|element|boolean)',\n  fallbackPlacements: 'array',\n  boundary: '(string|element)',\n  customClass: '(string|function)',\n  sanitize: 'boolean',\n  sanitizeFn: '(null|function)',\n  allowList: 'object',\n  popperConfig: '(null|object|function)'\n};\nconst $xqrD$var$AttachmentMap = {\n  AUTO: 'auto',\n  TOP: 'top',\n  RIGHT: $xqrD$var$isRTL() ? 'left' : 'right',\n  BOTTOM: 'bottom',\n  LEFT: $xqrD$var$isRTL() ? 'right' : 'left'\n};\nconst $xqrD$var$Default$3 = {\n  animation: true,\n  template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"tooltip-arrow\"></div>' + '<div class=\"tooltip-inner\"></div>' + '</div>',\n  trigger: 'hover focus',\n  title: '',\n  delay: 0,\n  html: false,\n  selector: false,\n  placement: 'top',\n  offset: [0, 0],\n  container: false,\n  fallbackPlacements: ['top', 'right', 'bottom', 'left'],\n  boundary: 'clippingParents',\n  customClass: '',\n  sanitize: true,\n  sanitizeFn: null,\n  allowList: $xqrD$var$DefaultAllowlist,\n  popperConfig: null\n};\nconst $xqrD$var$Event$2 = {\n  HIDE: `hide${$xqrD$var$EVENT_KEY$4}`,\n  HIDDEN: `hidden${$xqrD$var$EVENT_KEY$4}`,\n  SHOW: `show${$xqrD$var$EVENT_KEY$4}`,\n  SHOWN: `shown${$xqrD$var$EVENT_KEY$4}`,\n  INSERTED: `inserted${$xqrD$var$EVENT_KEY$4}`,\n  CLICK: `click${$xqrD$var$EVENT_KEY$4}`,\n  FOCUSIN: `focusin${$xqrD$var$EVENT_KEY$4}`,\n  FOCUSOUT: `focusout${$xqrD$var$EVENT_KEY$4}`,\n  MOUSEENTER: `mouseenter${$xqrD$var$EVENT_KEY$4}`,\n  MOUSELEAVE: `mouseleave${$xqrD$var$EVENT_KEY$4}`\n};\nconst $xqrD$var$CLASS_NAME_FADE$2 = 'fade';\nconst $xqrD$var$CLASS_NAME_MODAL = 'modal';\nconst $xqrD$var$CLASS_NAME_SHOW$2 = 'show';\nconst $xqrD$var$HOVER_STATE_SHOW = 'show';\nconst $xqrD$var$HOVER_STATE_OUT = 'out';\nconst $xqrD$var$SELECTOR_TOOLTIP_INNER = '.tooltip-inner';\nconst $xqrD$var$SELECTOR_MODAL = `.${$xqrD$var$CLASS_NAME_MODAL}`;\nconst $xqrD$var$EVENT_MODAL_HIDE = 'hide.bs.modal';\nconst $xqrD$var$TRIGGER_HOVER = 'hover';\nconst $xqrD$var$TRIGGER_FOCUS = 'focus';\nconst $xqrD$var$TRIGGER_CLICK = 'click';\nconst $xqrD$var$TRIGGER_MANUAL = 'manual';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass $xqrD$export$Tooltip extends $xqrD$var$BaseComponent {\n  constructor(element, config) {\n    if (typeof $xqrD$import$Popper === 'undefined') {\n      throw new TypeError('Bootstrap\\'s tooltips require Popper (https://popper.js.org)');\n    }\n\n    super(element); // private\n\n    this._isEnabled = true;\n    this._timeout = 0;\n    this._hoverState = '';\n    this._activeTrigger = {};\n    this._popper = null; // Protected\n\n    this._config = this._getConfig(config);\n    this.tip = null;\n\n    this._setListeners();\n  } // Getters\n\n\n  static get Default() {\n    return $xqrD$var$Default$3;\n  }\n\n  static get NAME() {\n    return $xqrD$var$NAME$4;\n  }\n\n  static get Event() {\n    return $xqrD$var$Event$2;\n  }\n\n  static get DefaultType() {\n    return $xqrD$var$DefaultType$3;\n  } // Public\n\n\n  enable() {\n    this._isEnabled = true;\n  }\n\n  disable() {\n    this._isEnabled = false;\n  }\n\n  toggleEnabled() {\n    this._isEnabled = !this._isEnabled;\n  }\n\n  toggle(event) {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    if (event) {\n      const context = this._initializeOnDelegatedTarget(event);\n\n      context._activeTrigger.click = !context._activeTrigger.click;\n\n      if (context._isWithActiveTrigger()) {\n        context._enter(null, context);\n      } else {\n        context._leave(null, context);\n      }\n    } else {\n      if (this.getTipElement().classList.contains($xqrD$var$CLASS_NAME_SHOW$2)) {\n        this._leave(null, this);\n\n        return;\n      }\n\n      this._enter(null, this);\n    }\n  }\n\n  dispose() {\n    clearTimeout(this._timeout);\n    $xqrD$var$EventHandler.off(this._element.closest($xqrD$var$SELECTOR_MODAL), $xqrD$var$EVENT_MODAL_HIDE, this._hideModalHandler);\n\n    if (this.tip) {\n      this.tip.remove();\n    }\n\n    this._disposePopper();\n\n    super.dispose();\n  }\n\n  show() {\n    if (this._element.style.display === 'none') {\n      throw new Error('Please use show on visible elements');\n    }\n\n    if (!(this.isWithContent() && this._isEnabled)) {\n      return;\n    }\n\n    const showEvent = $xqrD$var$EventHandler.trigger(this._element, this.constructor.Event.SHOW);\n    const shadowRoot = $xqrD$var$findShadowRoot(this._element);\n    const isInTheDom = shadowRoot === null ? this._element.ownerDocument.documentElement.contains(this._element) : shadowRoot.contains(this._element);\n\n    if (showEvent.defaultPrevented || !isInTheDom) {\n      return;\n    } // A trick to recreate a tooltip in case a new title is given by using the NOT documented `data-bs-original-title`\n    // This will be removed later in favor of a `setContent` method\n\n\n    if (this.constructor.NAME === 'tooltip' && this.tip && this.getTitle() !== this.tip.querySelector($xqrD$var$SELECTOR_TOOLTIP_INNER).innerHTML) {\n      this._disposePopper();\n\n      this.tip.remove();\n      this.tip = null;\n    }\n\n    const tip = this.getTipElement();\n    const tipId = $xqrD$var$getUID(this.constructor.NAME);\n    tip.setAttribute('id', tipId);\n\n    this._element.setAttribute('aria-describedby', tipId);\n\n    if (this._config.animation) {\n      tip.classList.add($xqrD$var$CLASS_NAME_FADE$2);\n    }\n\n    const placement = typeof this._config.placement === 'function' ? this._config.placement.call(this, tip, this._element) : this._config.placement;\n\n    const attachment = this._getAttachment(placement);\n\n    this._addAttachmentClass(attachment);\n\n    const {\n      container\n    } = this._config;\n    $xqrD$var$Data.set(tip, this.constructor.DATA_KEY, this);\n\n    if (!this._element.ownerDocument.documentElement.contains(this.tip)) {\n      container.append(tip);\n      $xqrD$var$EventHandler.trigger(this._element, this.constructor.Event.INSERTED);\n    }\n\n    if (this._popper) {\n      this._popper.update();\n    } else {\n      this._popper = $xqrD$import$Popper.createPopper(this._element, tip, this._getPopperConfig(attachment));\n    }\n\n    tip.classList.add($xqrD$var$CLASS_NAME_SHOW$2);\n\n    const customClass = this._resolvePossibleFunction(this._config.customClass);\n\n    if (customClass) {\n      tip.classList.add(...customClass.split(' '));\n    } // If this is a touch-enabled device we add extra\n    // empty mouseover listeners to the body's immediate children;\n    // only needed because of broken event delegation on iOS\n    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n\n    if ('ontouchstart' in document.documentElement) {\n      [].concat(...document.body.children).forEach(element => {\n        $xqrD$var$EventHandler.on(element, 'mouseover', $xqrD$var$noop);\n      });\n    }\n\n    const complete = () => {\n      const prevHoverState = this._hoverState;\n      this._hoverState = null;\n      $xqrD$var$EventHandler.trigger(this._element, this.constructor.Event.SHOWN);\n\n      if (prevHoverState === $xqrD$var$HOVER_STATE_OUT) {\n        this._leave(null, this);\n      }\n    };\n\n    const isAnimated = this.tip.classList.contains($xqrD$var$CLASS_NAME_FADE$2);\n\n    this._queueCallback(complete, this.tip, isAnimated);\n  }\n\n  hide() {\n    if (!this._popper) {\n      return;\n    }\n\n    const tip = this.getTipElement();\n\n    const complete = () => {\n      if (this._isWithActiveTrigger()) {\n        return;\n      }\n\n      if (this._hoverState !== $xqrD$var$HOVER_STATE_SHOW) {\n        tip.remove();\n      }\n\n      this._cleanTipClass();\n\n      this._element.removeAttribute('aria-describedby');\n\n      $xqrD$var$EventHandler.trigger(this._element, this.constructor.Event.HIDDEN);\n\n      this._disposePopper();\n    };\n\n    const hideEvent = $xqrD$var$EventHandler.trigger(this._element, this.constructor.Event.HIDE);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    tip.classList.remove($xqrD$var$CLASS_NAME_SHOW$2); // If this is a touch-enabled device we remove the extra\n    // empty mouseover listeners we added for iOS support\n\n    if ('ontouchstart' in document.documentElement) {\n      [].concat(...document.body.children).forEach(element => $xqrD$var$EventHandler.off(element, 'mouseover', $xqrD$var$noop));\n    }\n\n    this._activeTrigger[$xqrD$var$TRIGGER_CLICK] = false;\n    this._activeTrigger[$xqrD$var$TRIGGER_FOCUS] = false;\n    this._activeTrigger[$xqrD$var$TRIGGER_HOVER] = false;\n    const isAnimated = this.tip.classList.contains($xqrD$var$CLASS_NAME_FADE$2);\n\n    this._queueCallback(complete, this.tip, isAnimated);\n\n    this._hoverState = '';\n  }\n\n  update() {\n    if (this._popper !== null) {\n      this._popper.update();\n    }\n  } // Protected\n\n\n  isWithContent() {\n    return Boolean(this.getTitle());\n  }\n\n  getTipElement() {\n    if (this.tip) {\n      return this.tip;\n    }\n\n    const element = document.createElement('div');\n    element.innerHTML = this._config.template;\n    const tip = element.children[0];\n    this.setContent(tip);\n    tip.classList.remove($xqrD$var$CLASS_NAME_FADE$2, $xqrD$var$CLASS_NAME_SHOW$2);\n    this.tip = tip;\n    return this.tip;\n  }\n\n  setContent(tip) {\n    this._sanitizeAndSetContent(tip, this.getTitle(), $xqrD$var$SELECTOR_TOOLTIP_INNER);\n  }\n\n  _sanitizeAndSetContent(template, content, selector) {\n    const templateElement = $xqrD$var$SelectorEngine.findOne(selector, template);\n\n    if (!content && templateElement) {\n      templateElement.remove();\n      return;\n    } // we use append for html objects to maintain js events\n\n\n    this.setElementContent(templateElement, content);\n  }\n\n  setElementContent(element, content) {\n    if (element === null) {\n      return;\n    }\n\n    if ($xqrD$var$isElement(content)) {\n      content = $xqrD$var$getElement(content); // content is a DOM node or a jQuery\n\n      if (this._config.html) {\n        if (content.parentNode !== element) {\n          element.innerHTML = '';\n          element.append(content);\n        }\n      } else {\n        element.textContent = content.textContent;\n      }\n\n      return;\n    }\n\n    if (this._config.html) {\n      if (this._config.sanitize) {\n        content = $xqrD$var$sanitizeHtml(content, this._config.allowList, this._config.sanitizeFn);\n      }\n\n      element.innerHTML = content;\n    } else {\n      element.textContent = content;\n    }\n  }\n\n  getTitle() {\n    const title = this._element.getAttribute('data-bs-original-title') || this._config.title;\n\n    return this._resolvePossibleFunction(title);\n  }\n\n  updateAttachment(attachment) {\n    if (attachment === 'right') {\n      return 'end';\n    }\n\n    if (attachment === 'left') {\n      return 'start';\n    }\n\n    return attachment;\n  } // Private\n\n\n  _initializeOnDelegatedTarget(event, context) {\n    return context || this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());\n  }\n\n  _getOffset() {\n    const {\n      offset\n    } = this._config;\n\n    if (typeof offset === 'string') {\n      return offset.split(',').map(val => Number.parseInt(val, 10));\n    }\n\n    if (typeof offset === 'function') {\n      return popperData => offset(popperData, this._element);\n    }\n\n    return offset;\n  }\n\n  _resolvePossibleFunction(content) {\n    return typeof content === 'function' ? content.call(this._element) : content;\n  }\n\n  _getPopperConfig(attachment) {\n    const defaultBsPopperConfig = {\n      placement: attachment,\n      modifiers: [{\n        name: 'flip',\n        options: {\n          fallbackPlacements: this._config.fallbackPlacements\n        }\n      }, {\n        name: 'offset',\n        options: {\n          offset: this._getOffset()\n        }\n      }, {\n        name: 'preventOverflow',\n        options: {\n          boundary: this._config.boundary\n        }\n      }, {\n        name: 'arrow',\n        options: {\n          element: `.${this.constructor.NAME}-arrow`\n        }\n      }, {\n        name: 'onChange',\n        enabled: true,\n        phase: 'afterWrite',\n        fn: data => this._handlePopperPlacementChange(data)\n      }],\n      onFirstUpdate: data => {\n        if (data.options.placement !== data.placement) {\n          this._handlePopperPlacementChange(data);\n        }\n      }\n    };\n    return { ...defaultBsPopperConfig,\n      ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)\n    };\n  }\n\n  _addAttachmentClass(attachment) {\n    this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(attachment)}`);\n  }\n\n  _getAttachment(placement) {\n    return $xqrD$var$AttachmentMap[placement.toUpperCase()];\n  }\n\n  _setListeners() {\n    const triggers = this._config.trigger.split(' ');\n\n    triggers.forEach(trigger => {\n      if (trigger === 'click') {\n        $xqrD$var$EventHandler.on(this._element, this.constructor.Event.CLICK, this._config.selector, event => this.toggle(event));\n      } else if (trigger !== $xqrD$var$TRIGGER_MANUAL) {\n        const eventIn = trigger === $xqrD$var$TRIGGER_HOVER ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN;\n        const eventOut = trigger === $xqrD$var$TRIGGER_HOVER ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;\n        $xqrD$var$EventHandler.on(this._element, eventIn, this._config.selector, event => this._enter(event));\n        $xqrD$var$EventHandler.on(this._element, eventOut, this._config.selector, event => this._leave(event));\n      }\n    });\n\n    this._hideModalHandler = () => {\n      if (this._element) {\n        this.hide();\n      }\n    };\n\n    $xqrD$var$EventHandler.on(this._element.closest($xqrD$var$SELECTOR_MODAL), $xqrD$var$EVENT_MODAL_HIDE, this._hideModalHandler);\n\n    if (this._config.selector) {\n      this._config = { ...this._config,\n        trigger: 'manual',\n        selector: ''\n      };\n    } else {\n      this._fixTitle();\n    }\n  }\n\n  _fixTitle() {\n    const title = this._element.getAttribute('title');\n\n    const originalTitleType = typeof this._element.getAttribute('data-bs-original-title');\n\n    if (title || originalTitleType !== 'string') {\n      this._element.setAttribute('data-bs-original-title', title || '');\n\n      if (title && !this._element.getAttribute('aria-label') && !this._element.textContent) {\n        this._element.setAttribute('aria-label', title);\n      }\n\n      this._element.setAttribute('title', '');\n    }\n  }\n\n  _enter(event, context) {\n    context = this._initializeOnDelegatedTarget(event, context);\n\n    if (event) {\n      context._activeTrigger[event.type === 'focusin' ? $xqrD$var$TRIGGER_FOCUS : $xqrD$var$TRIGGER_HOVER] = true;\n    }\n\n    if (context.getTipElement().classList.contains($xqrD$var$CLASS_NAME_SHOW$2) || context._hoverState === $xqrD$var$HOVER_STATE_SHOW) {\n      context._hoverState = $xqrD$var$HOVER_STATE_SHOW;\n      return;\n    }\n\n    clearTimeout(context._timeout);\n    context._hoverState = $xqrD$var$HOVER_STATE_SHOW;\n\n    if (!context._config.delay || !context._config.delay.show) {\n      context.show();\n      return;\n    }\n\n    context._timeout = setTimeout(() => {\n      if (context._hoverState === $xqrD$var$HOVER_STATE_SHOW) {\n        context.show();\n      }\n    }, context._config.delay.show);\n  }\n\n  _leave(event, context) {\n    context = this._initializeOnDelegatedTarget(event, context);\n\n    if (event) {\n      context._activeTrigger[event.type === 'focusout' ? $xqrD$var$TRIGGER_FOCUS : $xqrD$var$TRIGGER_HOVER] = context._element.contains(event.relatedTarget);\n    }\n\n    if (context._isWithActiveTrigger()) {\n      return;\n    }\n\n    clearTimeout(context._timeout);\n    context._hoverState = $xqrD$var$HOVER_STATE_OUT;\n\n    if (!context._config.delay || !context._config.delay.hide) {\n      context.hide();\n      return;\n    }\n\n    context._timeout = setTimeout(() => {\n      if (context._hoverState === $xqrD$var$HOVER_STATE_OUT) {\n        context.hide();\n      }\n    }, context._config.delay.hide);\n  }\n\n  _isWithActiveTrigger() {\n    for (const trigger in this._activeTrigger) {\n      if (this._activeTrigger[trigger]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _getConfig(config) {\n    const dataAttributes = $xqrD$var$Manipulator.getDataAttributes(this._element);\n    Object.keys(dataAttributes).forEach(dataAttr => {\n      if ($xqrD$var$DISALLOWED_ATTRIBUTES.has(dataAttr)) {\n        delete dataAttributes[dataAttr];\n      }\n    });\n    config = { ...this.constructor.Default,\n      ...dataAttributes,\n      ...(typeof config === 'object' && config ? config : {})\n    };\n    config.container = config.container === false ? document.body : $xqrD$var$getElement(config.container);\n\n    if (typeof config.delay === 'number') {\n      config.delay = {\n        show: config.delay,\n        hide: config.delay\n      };\n    }\n\n    if (typeof config.title === 'number') {\n      config.title = config.title.toString();\n    }\n\n    if (typeof config.content === 'number') {\n      config.content = config.content.toString();\n    }\n\n    $xqrD$var$typeCheckConfig($xqrD$var$NAME$4, config, this.constructor.DefaultType);\n\n    if (config.sanitize) {\n      config.template = $xqrD$var$sanitizeHtml(config.template, config.allowList, config.sanitizeFn);\n    }\n\n    return config;\n  }\n\n  _getDelegateConfig() {\n    const config = {};\n\n    for (const key in this._config) {\n      if (this.constructor.Default[key] !== this._config[key]) {\n        config[key] = this._config[key];\n      }\n    } // In the future can be replaced with:\n    // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])\n    // `Object.fromEntries(keysWithDifferentValues)`\n\n\n    return config;\n  }\n\n  _cleanTipClass() {\n    const tip = this.getTipElement();\n    const basicClassPrefixRegex = new RegExp(`(^|\\\\s)${this._getBasicClassPrefix()}\\\\S+`, 'g');\n    const tabClass = tip.getAttribute('class').match(basicClassPrefixRegex);\n\n    if (tabClass !== null && tabClass.length > 0) {\n      tabClass.map(token => token.trim()).forEach(tClass => tip.classList.remove(tClass));\n    }\n  }\n\n  _getBasicClassPrefix() {\n    return $xqrD$var$CLASS_PREFIX$1;\n  }\n\n  _handlePopperPlacementChange(popperData) {\n    const {\n      state\n    } = popperData;\n\n    if (!state) {\n      return;\n    }\n\n    this.tip = state.elements.popper;\n\n    this._cleanTipClass();\n\n    this._addAttachmentClass(this._getAttachment(state.placement));\n  }\n\n  _disposePopper() {\n    if (this._popper) {\n      this._popper.destroy();\n\n      this._popper = null;\n    }\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = $xqrD$export$Tooltip.getOrCreateInstance(this, config);\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Tooltip to jQuery only if jQuery is present\n */\n\n\n$xqrD$var$defineJQueryPlugin($xqrD$export$Tooltip);\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): popover.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst $xqrD$var$NAME$3 = 'popover';\nconst $xqrD$var$DATA_KEY$3 = 'bs.popover';\nconst $xqrD$var$EVENT_KEY$3 = `.${$xqrD$var$DATA_KEY$3}`;\nconst $xqrD$var$CLASS_PREFIX = 'bs-popover';\nconst $xqrD$var$Default$2 = { ...$xqrD$export$Tooltip.Default,\n  placement: 'right',\n  offset: [0, 8],\n  trigger: 'click',\n  content: '',\n  template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"popover-arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div>' + '</div>'\n};\nconst $xqrD$var$DefaultType$2 = { ...$xqrD$export$Tooltip.DefaultType,\n  content: '(string|element|function)'\n};\nconst $xqrD$var$Event$1 = {\n  HIDE: `hide${$xqrD$var$EVENT_KEY$3}`,\n  HIDDEN: `hidden${$xqrD$var$EVENT_KEY$3}`,\n  SHOW: `show${$xqrD$var$EVENT_KEY$3}`,\n  SHOWN: `shown${$xqrD$var$EVENT_KEY$3}`,\n  INSERTED: `inserted${$xqrD$var$EVENT_KEY$3}`,\n  CLICK: `click${$xqrD$var$EVENT_KEY$3}`,\n  FOCUSIN: `focusin${$xqrD$var$EVENT_KEY$3}`,\n  FOCUSOUT: `focusout${$xqrD$var$EVENT_KEY$3}`,\n  MOUSEENTER: `mouseenter${$xqrD$var$EVENT_KEY$3}`,\n  MOUSELEAVE: `mouseleave${$xqrD$var$EVENT_KEY$3}`\n};\nconst $xqrD$var$SELECTOR_TITLE = '.popover-header';\nconst $xqrD$var$SELECTOR_CONTENT = '.popover-body';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass $xqrD$export$Popover extends $xqrD$export$Tooltip {\n  // Getters\n  static get Default() {\n    return $xqrD$var$Default$2;\n  }\n\n  static get NAME() {\n    return $xqrD$var$NAME$3;\n  }\n\n  static get Event() {\n    return $xqrD$var$Event$1;\n  }\n\n  static get DefaultType() {\n    return $xqrD$var$DefaultType$2;\n  } // Overrides\n\n\n  isWithContent() {\n    return this.getTitle() || this._getContent();\n  }\n\n  setContent(tip) {\n    this._sanitizeAndSetContent(tip, this.getTitle(), $xqrD$var$SELECTOR_TITLE);\n\n    this._sanitizeAndSetContent(tip, this._getContent(), $xqrD$var$SELECTOR_CONTENT);\n  } // Private\n\n\n  _getContent() {\n    return this._resolvePossibleFunction(this._config.content);\n  }\n\n  _getBasicClassPrefix() {\n    return $xqrD$var$CLASS_PREFIX;\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = $xqrD$export$Popover.getOrCreateInstance(this, config);\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Popover to jQuery only if jQuery is present\n */\n\n\n$xqrD$var$defineJQueryPlugin($xqrD$export$Popover);\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): scrollspy.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst $xqrD$var$NAME$2 = 'scrollspy';\nconst $xqrD$var$DATA_KEY$2 = 'bs.scrollspy';\nconst $xqrD$var$EVENT_KEY$2 = `.${$xqrD$var$DATA_KEY$2}`;\nconst $xqrD$var$DATA_API_KEY$1 = '.data-api';\nconst $xqrD$var$Default$1 = {\n  offset: 10,\n  method: 'auto',\n  target: ''\n};\nconst $xqrD$var$DefaultType$1 = {\n  offset: 'number',\n  method: 'string',\n  target: '(string|element)'\n};\nconst $xqrD$var$EVENT_ACTIVATE = `activate${$xqrD$var$EVENT_KEY$2}`;\nconst $xqrD$var$EVENT_SCROLL = `scroll${$xqrD$var$EVENT_KEY$2}`;\nconst $xqrD$var$EVENT_LOAD_DATA_API = `load${$xqrD$var$EVENT_KEY$2}${$xqrD$var$DATA_API_KEY$1}`;\nconst $xqrD$var$CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';\nconst $xqrD$var$CLASS_NAME_ACTIVE$1 = 'active';\nconst $xqrD$var$SELECTOR_DATA_SPY = '[data-bs-spy=\"scroll\"]';\nconst $xqrD$var$SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';\nconst $xqrD$var$SELECTOR_NAV_LINKS = '.nav-link';\nconst $xqrD$var$SELECTOR_NAV_ITEMS = '.nav-item';\nconst $xqrD$var$SELECTOR_LIST_ITEMS = '.list-group-item';\nconst $xqrD$var$SELECTOR_LINK_ITEMS = `${$xqrD$var$SELECTOR_NAV_LINKS}, ${$xqrD$var$SELECTOR_LIST_ITEMS}, .${$xqrD$var$CLASS_NAME_DROPDOWN_ITEM}`;\nconst $xqrD$var$SELECTOR_DROPDOWN$1 = '.dropdown';\nconst $xqrD$var$SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';\nconst $xqrD$var$METHOD_OFFSET = 'offset';\nconst $xqrD$var$METHOD_POSITION = 'position';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass $xqrD$export$ScrollSpy extends $xqrD$var$BaseComponent {\n  constructor(element, config) {\n    super(element);\n    this._scrollElement = this._element.tagName === 'BODY' ? window : this._element;\n    this._config = this._getConfig(config);\n    this._offsets = [];\n    this._targets = [];\n    this._activeTarget = null;\n    this._scrollHeight = 0;\n    $xqrD$var$EventHandler.on(this._scrollElement, $xqrD$var$EVENT_SCROLL, () => this._process());\n    this.refresh();\n\n    this._process();\n  } // Getters\n\n\n  static get Default() {\n    return $xqrD$var$Default$1;\n  }\n\n  static get NAME() {\n    return $xqrD$var$NAME$2;\n  } // Public\n\n\n  refresh() {\n    const autoMethod = this._scrollElement === this._scrollElement.window ? $xqrD$var$METHOD_OFFSET : $xqrD$var$METHOD_POSITION;\n    const offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;\n    const offsetBase = offsetMethod === $xqrD$var$METHOD_POSITION ? this._getScrollTop() : 0;\n    this._offsets = [];\n    this._targets = [];\n    this._scrollHeight = this._getScrollHeight();\n    const targets = $xqrD$var$SelectorEngine.find($xqrD$var$SELECTOR_LINK_ITEMS, this._config.target);\n    targets.map(element => {\n      const targetSelector = $xqrD$var$getSelectorFromElement(element);\n      const target = targetSelector ? $xqrD$var$SelectorEngine.findOne(targetSelector) : null;\n\n      if (target) {\n        const targetBCR = target.getBoundingClientRect();\n\n        if (targetBCR.width || targetBCR.height) {\n          return [$xqrD$var$Manipulator[offsetMethod](target).top + offsetBase, targetSelector];\n        }\n      }\n\n      return null;\n    }).filter(item => item).sort((a, b) => a[0] - b[0]).forEach(item => {\n      this._offsets.push(item[0]);\n\n      this._targets.push(item[1]);\n    });\n  }\n\n  dispose() {\n    $xqrD$var$EventHandler.off(this._scrollElement, $xqrD$var$EVENT_KEY$2);\n    super.dispose();\n  } // Private\n\n\n  _getConfig(config) {\n    config = { ...$xqrD$var$Default$1,\n      ...$xqrD$var$Manipulator.getDataAttributes(this._element),\n      ...(typeof config === 'object' && config ? config : {})\n    };\n    config.target = $xqrD$var$getElement(config.target) || document.documentElement;\n    $xqrD$var$typeCheckConfig($xqrD$var$NAME$2, config, $xqrD$var$DefaultType$1);\n    return config;\n  }\n\n  _getScrollTop() {\n    return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n  }\n\n  _getScrollHeight() {\n    return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n  }\n\n  _getOffsetHeight() {\n    return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n  }\n\n  _process() {\n    const scrollTop = this._getScrollTop() + this._config.offset;\n\n    const scrollHeight = this._getScrollHeight();\n\n    const maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();\n\n    if (this._scrollHeight !== scrollHeight) {\n      this.refresh();\n    }\n\n    if (scrollTop >= maxScroll) {\n      const target = this._targets[this._targets.length - 1];\n\n      if (this._activeTarget !== target) {\n        this._activate(target);\n      }\n\n      return;\n    }\n\n    if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {\n      this._activeTarget = null;\n\n      this._clear();\n\n      return;\n    }\n\n    for (let i = this._offsets.length; i--;) {\n      const isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);\n\n      if (isActiveTarget) {\n        this._activate(this._targets[i]);\n      }\n    }\n  }\n\n  _activate(target) {\n    this._activeTarget = target;\n\n    this._clear();\n\n    const queries = $xqrD$var$SELECTOR_LINK_ITEMS.split(',').map(selector => `${selector}[data-bs-target=\"${target}\"],${selector}[href=\"${target}\"]`);\n    const link = $xqrD$var$SelectorEngine.findOne(queries.join(','), this._config.target);\n    link.classList.add($xqrD$var$CLASS_NAME_ACTIVE$1);\n\n    if (link.classList.contains($xqrD$var$CLASS_NAME_DROPDOWN_ITEM)) {\n      $xqrD$var$SelectorEngine.findOne($xqrD$var$SELECTOR_DROPDOWN_TOGGLE$1, link.closest($xqrD$var$SELECTOR_DROPDOWN$1)).classList.add($xqrD$var$CLASS_NAME_ACTIVE$1);\n    } else {\n      $xqrD$var$SelectorEngine.parents(link, $xqrD$var$SELECTOR_NAV_LIST_GROUP$1).forEach(listGroup => {\n        // Set triggered links parents as active\n        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n        $xqrD$var$SelectorEngine.prev(listGroup, `${$xqrD$var$SELECTOR_NAV_LINKS}, ${$xqrD$var$SELECTOR_LIST_ITEMS}`).forEach(item => item.classList.add($xqrD$var$CLASS_NAME_ACTIVE$1)); // Handle special case when .nav-link is inside .nav-item\n\n        $xqrD$var$SelectorEngine.prev(listGroup, $xqrD$var$SELECTOR_NAV_ITEMS).forEach(navItem => {\n          $xqrD$var$SelectorEngine.children(navItem, $xqrD$var$SELECTOR_NAV_LINKS).forEach(item => item.classList.add($xqrD$var$CLASS_NAME_ACTIVE$1));\n        });\n      });\n    }\n\n    $xqrD$var$EventHandler.trigger(this._scrollElement, $xqrD$var$EVENT_ACTIVATE, {\n      relatedTarget: target\n    });\n  }\n\n  _clear() {\n    $xqrD$var$SelectorEngine.find($xqrD$var$SELECTOR_LINK_ITEMS, this._config.target).filter(node => node.classList.contains($xqrD$var$CLASS_NAME_ACTIVE$1)).forEach(node => node.classList.remove($xqrD$var$CLASS_NAME_ACTIVE$1));\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = $xqrD$export$ScrollSpy.getOrCreateInstance(this, config);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config]();\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$xqrD$var$EventHandler.on(window, $xqrD$var$EVENT_LOAD_DATA_API, () => {\n  $xqrD$var$SelectorEngine.find($xqrD$var$SELECTOR_DATA_SPY).forEach(spy => new $xqrD$export$ScrollSpy(spy));\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .ScrollSpy to jQuery only if jQuery is present\n */\n\n$xqrD$var$defineJQueryPlugin($xqrD$export$ScrollSpy);\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): tab.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst $xqrD$var$NAME$1 = 'tab';\nconst $xqrD$var$DATA_KEY$1 = 'bs.tab';\nconst $xqrD$var$EVENT_KEY$1 = `.${$xqrD$var$DATA_KEY$1}`;\nconst $xqrD$var$DATA_API_KEY = '.data-api';\nconst $xqrD$var$EVENT_HIDE$1 = `hide${$xqrD$var$EVENT_KEY$1}`;\nconst $xqrD$var$EVENT_HIDDEN$1 = `hidden${$xqrD$var$EVENT_KEY$1}`;\nconst $xqrD$var$EVENT_SHOW$1 = `show${$xqrD$var$EVENT_KEY$1}`;\nconst $xqrD$var$EVENT_SHOWN$1 = `shown${$xqrD$var$EVENT_KEY$1}`;\nconst $xqrD$var$EVENT_CLICK_DATA_API = `click${$xqrD$var$EVENT_KEY$1}${$xqrD$var$DATA_API_KEY}`;\nconst $xqrD$var$CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';\nconst $xqrD$var$CLASS_NAME_ACTIVE = 'active';\nconst $xqrD$var$CLASS_NAME_FADE$1 = 'fade';\nconst $xqrD$var$CLASS_NAME_SHOW$1 = 'show';\nconst $xqrD$var$SELECTOR_DROPDOWN = '.dropdown';\nconst $xqrD$var$SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';\nconst $xqrD$var$SELECTOR_ACTIVE = '.active';\nconst $xqrD$var$SELECTOR_ACTIVE_UL = ':scope > li > .active';\nconst $xqrD$var$SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]';\nconst $xqrD$var$SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';\nconst $xqrD$var$SELECTOR_DROPDOWN_ACTIVE_CHILD = ':scope > .dropdown-menu .active';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass $xqrD$export$Tab extends $xqrD$var$BaseComponent {\n  // Getters\n  static get NAME() {\n    return $xqrD$var$NAME$1;\n  } // Public\n\n\n  show() {\n    if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains($xqrD$var$CLASS_NAME_ACTIVE)) {\n      return;\n    }\n\n    let previous;\n    const target = $xqrD$var$getElementFromSelector(this._element);\n\n    const listElement = this._element.closest($xqrD$var$SELECTOR_NAV_LIST_GROUP);\n\n    if (listElement) {\n      const itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? $xqrD$var$SELECTOR_ACTIVE_UL : $xqrD$var$SELECTOR_ACTIVE;\n      previous = $xqrD$var$SelectorEngine.find(itemSelector, listElement);\n      previous = previous[previous.length - 1];\n    }\n\n    const hideEvent = previous ? $xqrD$var$EventHandler.trigger(previous, $xqrD$var$EVENT_HIDE$1, {\n      relatedTarget: this._element\n    }) : null;\n    const showEvent = $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_SHOW$1, {\n      relatedTarget: previous\n    });\n\n    if (showEvent.defaultPrevented || hideEvent !== null && hideEvent.defaultPrevented) {\n      return;\n    }\n\n    this._activate(this._element, listElement);\n\n    const complete = () => {\n      $xqrD$var$EventHandler.trigger(previous, $xqrD$var$EVENT_HIDDEN$1, {\n        relatedTarget: this._element\n      });\n      $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_SHOWN$1, {\n        relatedTarget: previous\n      });\n    };\n\n    if (target) {\n      this._activate(target, target.parentNode, complete);\n    } else {\n      complete();\n    }\n  } // Private\n\n\n  _activate(element, container, callback) {\n    const activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? $xqrD$var$SelectorEngine.find($xqrD$var$SELECTOR_ACTIVE_UL, container) : $xqrD$var$SelectorEngine.children(container, $xqrD$var$SELECTOR_ACTIVE);\n    const active = activeElements[0];\n    const isTransitioning = callback && active && active.classList.contains($xqrD$var$CLASS_NAME_FADE$1);\n\n    const complete = () => this._transitionComplete(element, active, callback);\n\n    if (active && isTransitioning) {\n      active.classList.remove($xqrD$var$CLASS_NAME_SHOW$1);\n\n      this._queueCallback(complete, element, true);\n    } else {\n      complete();\n    }\n  }\n\n  _transitionComplete(element, active, callback) {\n    if (active) {\n      active.classList.remove($xqrD$var$CLASS_NAME_ACTIVE);\n      const dropdownChild = $xqrD$var$SelectorEngine.findOne($xqrD$var$SELECTOR_DROPDOWN_ACTIVE_CHILD, active.parentNode);\n\n      if (dropdownChild) {\n        dropdownChild.classList.remove($xqrD$var$CLASS_NAME_ACTIVE);\n      }\n\n      if (active.getAttribute('role') === 'tab') {\n        active.setAttribute('aria-selected', false);\n      }\n    }\n\n    element.classList.add($xqrD$var$CLASS_NAME_ACTIVE);\n\n    if (element.getAttribute('role') === 'tab') {\n      element.setAttribute('aria-selected', true);\n    }\n\n    $xqrD$var$reflow(element);\n\n    if (element.classList.contains($xqrD$var$CLASS_NAME_FADE$1)) {\n      element.classList.add($xqrD$var$CLASS_NAME_SHOW$1);\n    }\n\n    let parent = element.parentNode;\n\n    if (parent && parent.nodeName === 'LI') {\n      parent = parent.parentNode;\n    }\n\n    if (parent && parent.classList.contains($xqrD$var$CLASS_NAME_DROPDOWN_MENU)) {\n      const dropdownElement = element.closest($xqrD$var$SELECTOR_DROPDOWN);\n\n      if (dropdownElement) {\n        $xqrD$var$SelectorEngine.find($xqrD$var$SELECTOR_DROPDOWN_TOGGLE, dropdownElement).forEach(dropdown => dropdown.classList.add($xqrD$var$CLASS_NAME_ACTIVE));\n      }\n\n      element.setAttribute('aria-expanded', true);\n    }\n\n    if (callback) {\n      callback();\n    }\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = $xqrD$export$Tab.getOrCreateInstance(this);\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$xqrD$var$EventHandler.on(document, $xqrD$var$EVENT_CLICK_DATA_API, $xqrD$var$SELECTOR_DATA_TOGGLE, function (event) {\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault();\n  }\n\n  if ($xqrD$var$isDisabled(this)) {\n    return;\n  }\n\n  const data = $xqrD$export$Tab.getOrCreateInstance(this);\n  data.show();\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Tab to jQuery only if jQuery is present\n */\n\n$xqrD$var$defineJQueryPlugin($xqrD$export$Tab);\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): toast.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst $xqrD$var$NAME = 'toast';\nconst $xqrD$var$DATA_KEY = 'bs.toast';\nconst $xqrD$var$EVENT_KEY = `.${$xqrD$var$DATA_KEY}`;\nconst $xqrD$var$EVENT_MOUSEOVER = `mouseover${$xqrD$var$EVENT_KEY}`;\nconst $xqrD$var$EVENT_MOUSEOUT = `mouseout${$xqrD$var$EVENT_KEY}`;\nconst $xqrD$var$EVENT_FOCUSIN = `focusin${$xqrD$var$EVENT_KEY}`;\nconst $xqrD$var$EVENT_FOCUSOUT = `focusout${$xqrD$var$EVENT_KEY}`;\nconst $xqrD$var$EVENT_HIDE = `hide${$xqrD$var$EVENT_KEY}`;\nconst $xqrD$var$EVENT_HIDDEN = `hidden${$xqrD$var$EVENT_KEY}`;\nconst $xqrD$var$EVENT_SHOW = `show${$xqrD$var$EVENT_KEY}`;\nconst $xqrD$var$EVENT_SHOWN = `shown${$xqrD$var$EVENT_KEY}`;\nconst $xqrD$var$CLASS_NAME_FADE = 'fade';\nconst $xqrD$var$CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility\n\nconst $xqrD$var$CLASS_NAME_SHOW = 'show';\nconst $xqrD$var$CLASS_NAME_SHOWING = 'showing';\nconst $xqrD$var$DefaultType = {\n  animation: 'boolean',\n  autohide: 'boolean',\n  delay: 'number'\n};\nconst $xqrD$var$Default = {\n  animation: true,\n  autohide: true,\n  delay: 5000\n};\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass $xqrD$export$Toast extends $xqrD$var$BaseComponent {\n  constructor(element, config) {\n    super(element);\n    this._config = this._getConfig(config);\n    this._timeout = null;\n    this._hasMouseInteraction = false;\n    this._hasKeyboardInteraction = false;\n\n    this._setListeners();\n  } // Getters\n\n\n  static get DefaultType() {\n    return $xqrD$var$DefaultType;\n  }\n\n  static get Default() {\n    return $xqrD$var$Default;\n  }\n\n  static get NAME() {\n    return $xqrD$var$NAME;\n  } // Public\n\n\n  show() {\n    const showEvent = $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_SHOW);\n\n    if (showEvent.defaultPrevented) {\n      return;\n    }\n\n    this._clearTimeout();\n\n    if (this._config.animation) {\n      this._element.classList.add($xqrD$var$CLASS_NAME_FADE);\n    }\n\n    const complete = () => {\n      this._element.classList.remove($xqrD$var$CLASS_NAME_SHOWING);\n\n      $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_SHOWN);\n\n      this._maybeScheduleHide();\n    };\n\n    this._element.classList.remove($xqrD$var$CLASS_NAME_HIDE); // @deprecated\n\n\n    $xqrD$var$reflow(this._element);\n\n    this._element.classList.add($xqrD$var$CLASS_NAME_SHOW);\n\n    this._element.classList.add($xqrD$var$CLASS_NAME_SHOWING);\n\n    this._queueCallback(complete, this._element, this._config.animation);\n  }\n\n  hide() {\n    if (!this._element.classList.contains($xqrD$var$CLASS_NAME_SHOW)) {\n      return;\n    }\n\n    const hideEvent = $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_HIDE);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    const complete = () => {\n      this._element.classList.add($xqrD$var$CLASS_NAME_HIDE); // @deprecated\n\n\n      this._element.classList.remove($xqrD$var$CLASS_NAME_SHOWING);\n\n      this._element.classList.remove($xqrD$var$CLASS_NAME_SHOW);\n\n      $xqrD$var$EventHandler.trigger(this._element, $xqrD$var$EVENT_HIDDEN);\n    };\n\n    this._element.classList.add($xqrD$var$CLASS_NAME_SHOWING);\n\n    this._queueCallback(complete, this._element, this._config.animation);\n  }\n\n  dispose() {\n    this._clearTimeout();\n\n    if (this._element.classList.contains($xqrD$var$CLASS_NAME_SHOW)) {\n      this._element.classList.remove($xqrD$var$CLASS_NAME_SHOW);\n    }\n\n    super.dispose();\n  } // Private\n\n\n  _getConfig(config) {\n    config = { ...$xqrD$var$Default,\n      ...$xqrD$var$Manipulator.getDataAttributes(this._element),\n      ...(typeof config === 'object' && config ? config : {})\n    };\n    $xqrD$var$typeCheckConfig($xqrD$var$NAME, config, this.constructor.DefaultType);\n    return config;\n  }\n\n  _maybeScheduleHide() {\n    if (!this._config.autohide) {\n      return;\n    }\n\n    if (this._hasMouseInteraction || this._hasKeyboardInteraction) {\n      return;\n    }\n\n    this._timeout = setTimeout(() => {\n      this.hide();\n    }, this._config.delay);\n  }\n\n  _onInteraction(event, isInteracting) {\n    switch (event.type) {\n      case 'mouseover':\n      case 'mouseout':\n        this._hasMouseInteraction = isInteracting;\n        break;\n\n      case 'focusin':\n      case 'focusout':\n        this._hasKeyboardInteraction = isInteracting;\n        break;\n    }\n\n    if (isInteracting) {\n      this._clearTimeout();\n\n      return;\n    }\n\n    const nextElement = event.relatedTarget;\n\n    if (this._element === nextElement || this._element.contains(nextElement)) {\n      return;\n    }\n\n    this._maybeScheduleHide();\n  }\n\n  _setListeners() {\n    $xqrD$var$EventHandler.on(this._element, $xqrD$var$EVENT_MOUSEOVER, event => this._onInteraction(event, true));\n    $xqrD$var$EventHandler.on(this._element, $xqrD$var$EVENT_MOUSEOUT, event => this._onInteraction(event, false));\n    $xqrD$var$EventHandler.on(this._element, $xqrD$var$EVENT_FOCUSIN, event => this._onInteraction(event, true));\n    $xqrD$var$EventHandler.on(this._element, $xqrD$var$EVENT_FOCUSOUT, event => this._onInteraction(event, false));\n  }\n\n  _clearTimeout() {\n    clearTimeout(this._timeout);\n    this._timeout = null;\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = $xqrD$export$Toast.getOrCreateInstance(this, config);\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config](this);\n      }\n    });\n  }\n\n}\n\n$xqrD$var$enableDismissTrigger($xqrD$export$Toast);\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Toast to jQuery only if jQuery is present\n */\n\n$xqrD$var$defineJQueryPlugin($xqrD$export$Toast);\n$xqrD$exports.Tooltip = $xqrD$export$Tooltip;\n$xqrD$exports.Toast = $xqrD$export$Toast;\n$xqrD$exports.Tab = $xqrD$export$Tab;\n$xqrD$exports.ScrollSpy = $xqrD$export$ScrollSpy;\n$xqrD$exports.Popover = $xqrD$export$Popover;\n$xqrD$exports.Offcanvas = $xqrD$export$Offcanvas;\n$xqrD$exports.Modal = $xqrD$export$Modal;\n$xqrD$exports.Dropdown = $xqrD$export$Dropdown;\n$xqrD$exports.Collapse = $xqrD$export$Collapse;\n$xqrD$exports.Carousel = $xqrD$export$Carousel;\n$xqrD$exports.Button = $xqrD$export$Button;\n$xqrD$exports.Alert = $xqrD$export$Alert;"},"sourceMaps":null,"error":null,"hash":"de6ee9a6733967edd8f32d4c407a3137","cacheData":{"env":{},"imports":{"$xqrD$import$Popper":["@popperjs/core","*"]},"exports":{"Alert":"$xqrD$export$Alert","Button":"$xqrD$export$Button","Carousel":"$xqrD$export$Carousel","Collapse":"$xqrD$export$Collapse","Dropdown":"$xqrD$export$Dropdown","Modal":"$xqrD$export$Modal","Offcanvas":"$xqrD$export$Offcanvas","Popover":"$xqrD$export$Popover","ScrollSpy":"$xqrD$export$ScrollSpy","Tab":"$xqrD$export$Tab","Toast":"$xqrD$export$Toast","Tooltip":"$xqrD$export$Tooltip"},"wildcards":[],"sideEffects":true,"isES6Module":true}}