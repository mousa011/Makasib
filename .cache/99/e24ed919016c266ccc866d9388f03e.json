{"id":"ABzc","dependencies":[{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/package.json","includedInParent":true,"mtime":1637421147719},{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/package.json","includedInParent":true,"mtime":499162500000},{"name":"./symbols","loc":{"line":3,"column":30},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/node.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/symbols.js"},{"name":"./css-syntax-error","loc":{"line":4,"column":29},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/node.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/css-syntax-error.js"},{"name":"./stringifier","loc":{"line":5,"column":26},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/node.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/stringifier.js"},{"name":"./stringify","loc":{"line":6,"column":24},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/node.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/stringify.js"}],"generated":{"js":"var $ABzc$exports = {};\n\nfunction $ABzc$var$_toConsumableArray(arr) { return $ABzc$var$_arrayWithoutHoles(arr) || $ABzc$var$_iterableToArray(arr) || $ABzc$var$_unsupportedIterableToArray(arr) || $ABzc$var$_nonIterableSpread(); }\n\nfunction $ABzc$var$_nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction $ABzc$var$_iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction $ABzc$var$_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return $ABzc$var$_arrayLikeToArray(arr); }\n\nfunction $ABzc$var$_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = $ABzc$var$_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction $ABzc$var$_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return $ABzc$var$_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return $ABzc$var$_arrayLikeToArray(o, minLen); }\n\nfunction $ABzc$var$_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction $ABzc$var$_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction $ABzc$var$_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction $ABzc$var$_createClass(Constructor, protoProps, staticProps) { if (protoProps) $ABzc$var$_defineProperties(Constructor.prototype, protoProps); if (staticProps) $ABzc$var$_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction $ABzc$var$_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { $ABzc$var$_typeof = function _typeof(obj) { return typeof obj; }; } else { $ABzc$var$_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return $ABzc$var$_typeof(obj); }\n\nvar $ABzc$var$_require = $parcel$require(\"ABzc\", \"./symbols\"),\n    $ABzc$var$isClean = $ABzc$var$_require.isClean,\n    $ABzc$var$my = $ABzc$var$_require.my;\nvar $ABzc$var$CssSyntaxError = $parcel$require(\"ABzc\", \"./css-syntax-error\");\nvar $ABzc$var$Stringifier = $parcel$require(\"ABzc\", \"./stringifier\");\nvar $ABzc$var$stringify = $parcel$require(\"ABzc\", \"./stringify\");\n\nfunction $ABzc$var$cloneNode(obj, parent) {\n  var cloned = new obj.constructor();\n\n  for (var i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      // istanbul ignore next\n      continue;\n    }\n\n    if (i === 'proxyCache') continue;\n    var value = obj[i];\n    var type = $ABzc$var$_typeof(value);\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent;\n    } else if (i === 'source') {\n      cloned[i] = value;\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(function (j) {\n        return $ABzc$var$cloneNode(j, cloned);\n      });\n    } else {\n      if (type === 'object' && value !== null) value = $ABzc$var$cloneNode(value);\n      cloned[i] = value;\n    }\n  }\n\n  return cloned;\n}\n\nvar $ABzc$var$Node = /*#__PURE__*/function () {\n  function Node() {\n    var defaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    $ABzc$var$_classCallCheck(this, Node);\n    this.raws = {};\n    this[$ABzc$var$isClean] = false;\n    this[$ABzc$var$my] = true;\n\n    for (var name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = [];\n\n        var _iterator = $ABzc$var$_createForOfIteratorHelper(defaults[name]),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var node = _step.value;\n\n            if (typeof node.clone === 'function') {\n              this.append(node.clone());\n            } else {\n              this.append(node);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        this[name] = defaults[name];\n      }\n    }\n  }\n\n  $ABzc$var$_createClass(Node, [{\n    key: \"error\",\n    value: function error(message) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.source) {\n        var pos = this.positionBy(opts);\n        return this.source.input.error(message, pos.line, pos.column, opts);\n      }\n\n      return new $ABzc$var$CssSyntaxError(message);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(result, text, opts) {\n      var data = {\n        node: this\n      };\n\n      for (var i in opts) {\n        data[i] = opts[i];\n      }\n\n      return result.warn(text, data);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (this.parent) {\n        this.parent.removeChild(this);\n      }\n\n      this.parent = undefined;\n      return this;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var stringifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $ABzc$var$stringify;\n      if (stringifier.stringify) stringifier = stringifier.stringify;\n      var result = '';\n      stringifier(this, function (i) {\n        result += i;\n      });\n      return result;\n    }\n  }, {\n    key: \"assign\",\n    value: function assign() {\n      var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      for (var name in overrides) {\n        this[name] = overrides[name];\n      }\n\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var cloned = $ABzc$var$cloneNode(this);\n\n      for (var name in overrides) {\n        cloned[name] = overrides[name];\n      }\n\n      return cloned;\n    }\n  }, {\n    key: \"cloneBefore\",\n    value: function cloneBefore() {\n      var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var cloned = this.clone(overrides);\n      this.parent.insertBefore(this, cloned);\n      return cloned;\n    }\n  }, {\n    key: \"cloneAfter\",\n    value: function cloneAfter() {\n      var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var cloned = this.clone(overrides);\n      this.parent.insertAfter(this, cloned);\n      return cloned;\n    }\n  }, {\n    key: \"replaceWith\",\n    value: function replaceWith() {\n      if (this.parent) {\n        var bookmark = this;\n        var foundSelf = false;\n\n        for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {\n          nodes[_key] = arguments[_key];\n        }\n\n        for (var _i = 0, _nodes = nodes; _i < _nodes.length; _i++) {\n          var node = _nodes[_i];\n\n          if (node === this) {\n            foundSelf = true;\n          } else if (foundSelf) {\n            this.parent.insertAfter(bookmark, node);\n            bookmark = node;\n          } else {\n            this.parent.insertBefore(bookmark, node);\n          }\n        }\n\n        if (!foundSelf) {\n          this.remove();\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      if (!this.parent) return undefined;\n      var index = this.parent.index(this);\n      return this.parent.nodes[index + 1];\n    }\n  }, {\n    key: \"prev\",\n    value: function prev() {\n      if (!this.parent) return undefined;\n      var index = this.parent.index(this);\n      return this.parent.nodes[index - 1];\n    }\n  }, {\n    key: \"before\",\n    value: function before(add) {\n      this.parent.insertBefore(this, add);\n      return this;\n    }\n  }, {\n    key: \"after\",\n    value: function after(add) {\n      this.parent.insertAfter(this, add);\n      return this;\n    }\n  }, {\n    key: \"root\",\n    value: function root() {\n      var result = this;\n\n      while (result.parent && result.parent.type !== 'document') {\n        result = result.parent;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"raw\",\n    value: function raw(prop, defaultType) {\n      var str = new $ABzc$var$Stringifier();\n      return str.raw(this, prop, defaultType);\n    }\n  }, {\n    key: \"cleanRaws\",\n    value: function cleanRaws(keepBetween) {\n      delete this.raws.before;\n      delete this.raws.after;\n      if (!keepBetween) delete this.raws.between;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(_, inputs) {\n      var fixed = {};\n      var emitInputs = inputs == null;\n      inputs = inputs || new Map();\n      var inputsNextIndex = 0;\n\n      for (var name in this) {\n        if (!Object.prototype.hasOwnProperty.call(this, name)) {\n          // istanbul ignore next\n          continue;\n        }\n\n        if (name === 'parent' || name === 'proxyCache') continue;\n        var value = this[name];\n\n        if (Array.isArray(value)) {\n          fixed[name] = value.map(function (i) {\n            if ($ABzc$var$_typeof(i) === 'object' && i.toJSON) {\n              return i.toJSON(null, inputs);\n            } else {\n              return i;\n            }\n          });\n        } else if ($ABzc$var$_typeof(value) === 'object' && value.toJSON) {\n          fixed[name] = value.toJSON(null, inputs);\n        } else if (name === 'source') {\n          var inputId = inputs.get(value.input);\n\n          if (inputId == null) {\n            inputId = inputsNextIndex;\n            inputs.set(value.input, inputsNextIndex);\n            inputsNextIndex++;\n          }\n\n          fixed[name] = {\n            inputId: inputId,\n            start: value.start,\n            end: value.end\n          };\n        } else {\n          fixed[name] = value;\n        }\n      }\n\n      if (emitInputs) {\n        fixed.inputs = $ABzc$var$_toConsumableArray(inputs.keys()).map(function (input) {\n          return input.toJSON();\n        });\n      }\n\n      return fixed;\n    }\n  }, {\n    key: \"positionInside\",\n    value: function positionInside(index) {\n      var string = this.toString();\n      var column = this.source.start.column;\n      var line = this.source.start.line;\n\n      for (var i = 0; i < index; i++) {\n        if (string[i] === '\\n') {\n          column = 1;\n          line += 1;\n        } else {\n          column += 1;\n        }\n      }\n\n      return {\n        line: line,\n        column: column\n      };\n    }\n  }, {\n    key: \"positionBy\",\n    value: function positionBy(opts) {\n      var pos = this.source.start;\n\n      if (opts.index) {\n        pos = this.positionInside(opts.index);\n      } else if (opts.word) {\n        var index = this.toString().indexOf(opts.word);\n        if (index !== -1) pos = this.positionInside(index);\n      }\n\n      return pos;\n    }\n  }, {\n    key: \"getProxyProcessor\",\n    value: function getProxyProcessor() {\n      return {\n        set: function set(node, prop, value) {\n          if (node[prop] === value) return true;\n          node[prop] = value;\n\n          if (prop === 'prop' || prop === 'value' || prop === 'name' || prop === 'params' || prop === 'important' || prop === 'text') {\n            node.markDirty();\n          }\n\n          return true;\n        },\n        get: function get(node, prop) {\n          if (prop === 'proxyOf') {\n            return node;\n          } else if (prop === 'root') {\n            return function () {\n              return node.root().toProxy();\n            };\n          } else {\n            return node[prop];\n          }\n        }\n      };\n    }\n  }, {\n    key: \"toProxy\",\n    value: function toProxy() {\n      if (!this.proxyCache) {\n        this.proxyCache = new Proxy(this, this.getProxyProcessor());\n      }\n\n      return this.proxyCache;\n    }\n  }, {\n    key: \"addToError\",\n    value: function addToError(error) {\n      error.postcssNode = this;\n\n      if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n        var s = this.source;\n        error.stack = error.stack.replace(/\\n\\s{4}at /, \"$&\".concat(s.input.from, \":\").concat(s.start.line, \":\").concat(s.start.column, \"$&\"));\n      }\n\n      return error;\n    }\n  }, {\n    key: \"markDirty\",\n    value: function markDirty() {\n      if (this[$ABzc$var$isClean]) {\n        this[$ABzc$var$isClean] = false;\n        var next = this;\n\n        while (next = next.parent) {\n          next[$ABzc$var$isClean] = false;\n        }\n      }\n    }\n  }, {\n    key: \"proxyOf\",\n    get: function get() {\n      return this;\n    }\n  }]);\n  return Node;\n}();\n\n$ABzc$exports = $ABzc$var$Node;\n$ABzc$var$Node.default = $ABzc$var$Node;"},"sourceMaps":null,"error":null,"hash":"4ae45ce7b3db4c0ead61d6627f91c157","cacheData":{"env":{},"imports":{"$require$./symbols":["./symbols","*"],"$require$./css-syntax-error":["./css-syntax-error","*"],"$require$./stringifier":["./stringifier","*"],"$require$./stringify":["./stringify","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}