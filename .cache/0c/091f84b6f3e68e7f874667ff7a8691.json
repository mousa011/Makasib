{"id":"Qa1n","dependencies":[{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/package.json","includedInParent":true,"mtime":1637421147719},{"name":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/package.json","includedInParent":true,"mtime":499162500000},{"name":"./declaration","loc":{"line":3,"column":26},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/parser.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/declaration.js"},{"name":"./tokenize","loc":{"line":4,"column":24},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/parser.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/tokenize.js"},{"name":"./comment","loc":{"line":5,"column":22},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/parser.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/comment.js"},{"name":"./at-rule","loc":{"line":6,"column":21},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/parser.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/at-rule.js"},{"name":"./root","loc":{"line":7,"column":19},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/parser.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/root.js"},{"name":"./rule","loc":{"line":8,"column":19},"parent":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/parser.js","resolved":"/Users/muhammadmousa/Desktop/my work/مكاسب/Makasib/node_modules/postcss/lib/rule.js"}],"generated":{"js":"var $Qa1n$exports = {};\n\nfunction $Qa1n$var$_slicedToArray(arr, i) { return $Qa1n$var$_arrayWithHoles(arr) || $Qa1n$var$_iterableToArrayLimit(arr, i) || $Qa1n$var$_unsupportedIterableToArray(arr, i) || $Qa1n$var$_nonIterableRest(); }\n\nfunction $Qa1n$var$_nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction $Qa1n$var$_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction $Qa1n$var$_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction $Qa1n$var$_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = $Qa1n$var$_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction $Qa1n$var$_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return $Qa1n$var$_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return $Qa1n$var$_arrayLikeToArray(o, minLen); }\n\nfunction $Qa1n$var$_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction $Qa1n$var$_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction $Qa1n$var$_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction $Qa1n$var$_createClass(Constructor, protoProps, staticProps) { if (protoProps) $Qa1n$var$_defineProperties(Constructor.prototype, protoProps); if (staticProps) $Qa1n$var$_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar $Qa1n$var$Declaration = $parcel$require(\"Qa1n\", \"./declaration\");\nvar $Qa1n$var$tokenizer = $parcel$require(\"Qa1n\", \"./tokenize\");\nvar $Qa1n$var$Comment = $parcel$require(\"Qa1n\", \"./comment\");\nvar $Qa1n$var$AtRule = $parcel$require(\"Qa1n\", \"./at-rule\");\nvar $Qa1n$var$Root = $parcel$require(\"Qa1n\", \"./root\");\nvar $Qa1n$var$Rule = $parcel$require(\"Qa1n\", \"./rule\");\n\nvar $Qa1n$var$Parser = /*#__PURE__*/function () {\n  function Parser(input) {\n    $Qa1n$var$_classCallCheck(this, Parser);\n    this.input = input;\n    this.root = new $Qa1n$var$Root();\n    this.current = this.root;\n    this.spaces = '';\n    this.semicolon = false;\n    this.customProperty = false;\n    this.createTokenizer();\n    this.root.source = {\n      input: input,\n      start: {\n        offset: 0,\n        line: 1,\n        column: 1\n      }\n    };\n  }\n\n  $Qa1n$var$_createClass(Parser, [{\n    key: \"createTokenizer\",\n    value: function createTokenizer() {\n      this.tokenizer = $Qa1n$var$tokenizer(this.input);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      var token;\n\n      while (!this.tokenizer.endOfFile()) {\n        token = this.tokenizer.nextToken();\n\n        switch (token[0]) {\n          case 'space':\n            this.spaces += token[1];\n            break;\n\n          case ';':\n            this.freeSemicolon(token);\n            break;\n\n          case '}':\n            this.end(token);\n            break;\n\n          case 'comment':\n            this.comment(token);\n            break;\n\n          case 'at-word':\n            this.atrule(token);\n            break;\n\n          case '{':\n            this.emptyRule(token);\n            break;\n\n          default:\n            this.other(token);\n            break;\n        }\n      }\n\n      this.endFile();\n    }\n  }, {\n    key: \"comment\",\n    value: function comment(token) {\n      var node = new $Qa1n$var$Comment();\n      this.init(node, token[2]);\n      node.source.end = this.getPosition(token[3] || token[2]);\n      var text = token[1].slice(2, -2);\n\n      if (/^\\s*$/.test(text)) {\n        node.text = '';\n        node.raws.left = text;\n        node.raws.right = '';\n      } else {\n        var match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/);\n        node.text = match[2];\n        node.raws.left = match[1];\n        node.raws.right = match[3];\n      }\n    }\n  }, {\n    key: \"emptyRule\",\n    value: function emptyRule(token) {\n      var node = new $Qa1n$var$Rule();\n      this.init(node, token[2]);\n      node.selector = '';\n      node.raws.between = '';\n      this.current = node;\n    }\n  }, {\n    key: \"other\",\n    value: function other(start) {\n      var end = false;\n      var type = null;\n      var colon = false;\n      var bracket = null;\n      var brackets = [];\n      var customProperty = start[1].startsWith('--');\n      var tokens = [];\n      var token = start;\n\n      while (token) {\n        type = token[0];\n        tokens.push(token);\n\n        if (type === '(' || type === '[') {\n          if (!bracket) bracket = token;\n          brackets.push(type === '(' ? ')' : ']');\n        } else if (customProperty && colon && type === '{') {\n          if (!bracket) bracket = token;\n          brackets.push('}');\n        } else if (brackets.length === 0) {\n          if (type === ';') {\n            if (colon) {\n              this.decl(tokens, customProperty);\n              return;\n            } else {\n              break;\n            }\n          } else if (type === '{') {\n            this.rule(tokens);\n            return;\n          } else if (type === '}') {\n            this.tokenizer.back(tokens.pop());\n            end = true;\n            break;\n          } else if (type === ':') {\n            colon = true;\n          }\n        } else if (type === brackets[brackets.length - 1]) {\n          brackets.pop();\n          if (brackets.length === 0) bracket = null;\n        }\n\n        token = this.tokenizer.nextToken();\n      }\n\n      if (this.tokenizer.endOfFile()) end = true;\n      if (brackets.length > 0) this.unclosedBracket(bracket);\n\n      if (end && colon) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0];\n          if (token !== 'space' && token !== 'comment') break;\n          this.tokenizer.back(tokens.pop());\n        }\n\n        this.decl(tokens, customProperty);\n      } else {\n        this.unknownWord(tokens);\n      }\n    }\n  }, {\n    key: \"rule\",\n    value: function rule(tokens) {\n      tokens.pop();\n      var node = new $Qa1n$var$Rule();\n      this.init(node, tokens[0][2]);\n      node.raws.between = this.spacesAndCommentsFromEnd(tokens);\n      this.raw(node, 'selector', tokens);\n      this.current = node;\n    }\n  }, {\n    key: \"decl\",\n    value: function decl(tokens, customProperty) {\n      var node = new $Qa1n$var$Declaration();\n      this.init(node, tokens[0][2]);\n      var last = tokens[tokens.length - 1];\n\n      if (last[0] === ';') {\n        this.semicolon = true;\n        tokens.pop();\n      }\n\n      node.source.end = this.getPosition(last[3] || last[2]);\n\n      while (tokens[0][0] !== 'word') {\n        if (tokens.length === 1) this.unknownWord(tokens);\n        node.raws.before += tokens.shift()[1];\n      }\n\n      node.source.start = this.getPosition(tokens[0][2]);\n      node.prop = '';\n\n      while (tokens.length) {\n        var type = tokens[0][0];\n\n        if (type === ':' || type === 'space' || type === 'comment') {\n          break;\n        }\n\n        node.prop += tokens.shift()[1];\n      }\n\n      node.raws.between = '';\n      var token;\n\n      while (tokens.length) {\n        token = tokens.shift();\n\n        if (token[0] === ':') {\n          node.raws.between += token[1];\n          break;\n        } else {\n          if (token[0] === 'word' && /\\w/.test(token[1])) {\n            this.unknownWord([token]);\n          }\n\n          node.raws.between += token[1];\n        }\n      }\n\n      if (node.prop[0] === '_' || node.prop[0] === '*') {\n        node.raws.before += node.prop[0];\n        node.prop = node.prop.slice(1);\n      }\n\n      var firstSpaces = this.spacesAndCommentsFromStart(tokens);\n      this.precheckMissedSemicolon(tokens);\n\n      for (var i = tokens.length - 1; i >= 0; i--) {\n        token = tokens[i];\n\n        if (token[1].toLowerCase() === '!important') {\n          node.important = true;\n          var string = this.stringFrom(tokens, i);\n          string = this.spacesFromEnd(tokens) + string;\n          if (string !== ' !important') node.raws.important = string;\n          break;\n        } else if (token[1].toLowerCase() === 'important') {\n          var cache = tokens.slice(0);\n          var str = '';\n\n          for (var j = i; j > 0; j--) {\n            var _type = cache[j][0];\n\n            if (str.trim().indexOf('!') === 0 && _type !== 'space') {\n              break;\n            }\n\n            str = cache.pop()[1] + str;\n          }\n\n          if (str.trim().indexOf('!') === 0) {\n            node.important = true;\n            node.raws.important = str;\n            tokens = cache;\n          }\n        }\n\n        if (token[0] !== 'space' && token[0] !== 'comment') {\n          break;\n        }\n      }\n\n      var hasWord = tokens.some(function (i) {\n        return i[0] !== 'space' && i[0] !== 'comment';\n      });\n      this.raw(node, 'value', tokens);\n\n      if (hasWord) {\n        node.raws.between += firstSpaces;\n      } else {\n        node.value = firstSpaces + node.value;\n      }\n\n      if (node.value.includes(':') && !customProperty) {\n        this.checkMissedSemicolon(tokens);\n      }\n    }\n  }, {\n    key: \"atrule\",\n    value: function atrule(token) {\n      var node = new $Qa1n$var$AtRule();\n      node.name = token[1].slice(1);\n\n      if (node.name === '') {\n        this.unnamedAtrule(node, token);\n      }\n\n      this.init(node, token[2]);\n      var type;\n      var prev;\n      var shift;\n      var last = false;\n      var open = false;\n      var params = [];\n      var brackets = [];\n\n      while (!this.tokenizer.endOfFile()) {\n        token = this.tokenizer.nextToken();\n        type = token[0];\n\n        if (type === '(' || type === '[') {\n          brackets.push(type === '(' ? ')' : ']');\n        } else if (type === '{' && brackets.length > 0) {\n          brackets.push('}');\n        } else if (type === brackets[brackets.length - 1]) {\n          brackets.pop();\n        }\n\n        if (brackets.length === 0) {\n          if (type === ';') {\n            node.source.end = this.getPosition(token[2]);\n            this.semicolon = true;\n            break;\n          } else if (type === '{') {\n            open = true;\n            break;\n          } else if (type === '}') {\n            if (params.length > 0) {\n              shift = params.length - 1;\n              prev = params[shift];\n\n              while (prev && prev[0] === 'space') {\n                prev = params[--shift];\n              }\n\n              if (prev) {\n                node.source.end = this.getPosition(prev[3] || prev[2]);\n              }\n            }\n\n            this.end(token);\n            break;\n          } else {\n            params.push(token);\n          }\n        } else {\n          params.push(token);\n        }\n\n        if (this.tokenizer.endOfFile()) {\n          last = true;\n          break;\n        }\n      }\n\n      node.raws.between = this.spacesAndCommentsFromEnd(params);\n\n      if (params.length) {\n        node.raws.afterName = this.spacesAndCommentsFromStart(params);\n        this.raw(node, 'params', params);\n\n        if (last) {\n          token = params[params.length - 1];\n          node.source.end = this.getPosition(token[3] || token[2]);\n          this.spaces = node.raws.between;\n          node.raws.between = '';\n        }\n      } else {\n        node.raws.afterName = '';\n        node.params = '';\n      }\n\n      if (open) {\n        node.nodes = [];\n        this.current = node;\n      }\n    }\n  }, {\n    key: \"end\",\n    value: function end(token) {\n      if (this.current.nodes && this.current.nodes.length) {\n        this.current.raws.semicolon = this.semicolon;\n      }\n\n      this.semicolon = false;\n      this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n      this.spaces = '';\n\n      if (this.current.parent) {\n        this.current.source.end = this.getPosition(token[2]);\n        this.current = this.current.parent;\n      } else {\n        this.unexpectedClose(token);\n      }\n    }\n  }, {\n    key: \"endFile\",\n    value: function endFile() {\n      if (this.current.parent) this.unclosedBlock();\n\n      if (this.current.nodes && this.current.nodes.length) {\n        this.current.raws.semicolon = this.semicolon;\n      }\n\n      this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n    }\n  }, {\n    key: \"freeSemicolon\",\n    value: function freeSemicolon(token) {\n      this.spaces += token[1];\n\n      if (this.current.nodes) {\n        var prev = this.current.nodes[this.current.nodes.length - 1];\n\n        if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n          prev.raws.ownSemicolon = this.spaces;\n          this.spaces = '';\n        }\n      }\n    } // Helpers\n\n  }, {\n    key: \"getPosition\",\n    value: function getPosition(offset) {\n      var pos = this.input.fromOffset(offset);\n      return {\n        offset: offset,\n        line: pos.line,\n        column: pos.col\n      };\n    }\n  }, {\n    key: \"init\",\n    value: function init(node, offset) {\n      this.current.push(node);\n      node.source = {\n        start: this.getPosition(offset),\n        input: this.input\n      };\n      node.raws.before = this.spaces;\n      this.spaces = '';\n      if (node.type !== 'comment') this.semicolon = false;\n    }\n  }, {\n    key: \"raw\",\n    value: function raw(node, prop, tokens) {\n      var token, type;\n      var length = tokens.length;\n      var value = '';\n      var clean = true;\n      var next, prev;\n      var pattern = /^([#.|])?(\\w)+/i;\n\n      for (var i = 0; i < length; i += 1) {\n        token = tokens[i];\n        type = token[0];\n\n        if (type === 'comment' && node.type === 'rule') {\n          prev = tokens[i - 1];\n          next = tokens[i + 1];\n\n          if (prev[0] !== 'space' && next[0] !== 'space' && pattern.test(prev[1]) && pattern.test(next[1])) {\n            value += token[1];\n          } else {\n            clean = false;\n          }\n\n          continue;\n        }\n\n        if (type === 'comment' || type === 'space' && i === length - 1) {\n          clean = false;\n        } else {\n          value += token[1];\n        }\n      }\n\n      if (!clean) {\n        var raw = tokens.reduce(function (all, i) {\n          return all + i[1];\n        }, '');\n        node.raws[prop] = {\n          value: value,\n          raw: raw\n        };\n      }\n\n      node[prop] = value;\n    }\n  }, {\n    key: \"spacesAndCommentsFromEnd\",\n    value: function spacesAndCommentsFromEnd(tokens) {\n      var lastTokenType;\n      var spaces = '';\n\n      while (tokens.length) {\n        lastTokenType = tokens[tokens.length - 1][0];\n        if (lastTokenType !== 'space' && lastTokenType !== 'comment') break;\n        spaces = tokens.pop()[1] + spaces;\n      }\n\n      return spaces;\n    }\n  }, {\n    key: \"spacesAndCommentsFromStart\",\n    value: function spacesAndCommentsFromStart(tokens) {\n      var next;\n      var spaces = '';\n\n      while (tokens.length) {\n        next = tokens[0][0];\n        if (next !== 'space' && next !== 'comment') break;\n        spaces += tokens.shift()[1];\n      }\n\n      return spaces;\n    }\n  }, {\n    key: \"spacesFromEnd\",\n    value: function spacesFromEnd(tokens) {\n      var lastTokenType;\n      var spaces = '';\n\n      while (tokens.length) {\n        lastTokenType = tokens[tokens.length - 1][0];\n        if (lastTokenType !== 'space') break;\n        spaces = tokens.pop()[1] + spaces;\n      }\n\n      return spaces;\n    }\n  }, {\n    key: \"stringFrom\",\n    value: function stringFrom(tokens, from) {\n      var result = '';\n\n      for (var i = from; i < tokens.length; i++) {\n        result += tokens[i][1];\n      }\n\n      tokens.splice(from, tokens.length - from);\n      return result;\n    }\n  }, {\n    key: \"colon\",\n    value: function colon(tokens) {\n      var brackets = 0;\n      var token, type, prev;\n\n      var _iterator = $Qa1n$var$_createForOfIteratorHelper(tokens.entries()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = $Qa1n$var$_slicedToArray(_step.value, 2),\n              i = _step$value[0],\n              element = _step$value[1];\n\n          token = element;\n          type = token[0];\n\n          if (type === '(') {\n            brackets += 1;\n          }\n\n          if (type === ')') {\n            brackets -= 1;\n          }\n\n          if (brackets === 0 && type === ':') {\n            if (!prev) {\n              this.doubleColon(token);\n            } else if (prev[0] === 'word' && prev[1] === 'progid') {\n              continue;\n            } else {\n              return i;\n            }\n          }\n\n          prev = token;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return false;\n    } // Errors\n\n  }, {\n    key: \"unclosedBracket\",\n    value: function unclosedBracket(bracket) {\n      throw this.input.error('Unclosed bracket', bracket[2]);\n    }\n  }, {\n    key: \"unknownWord\",\n    value: function unknownWord(tokens) {\n      throw this.input.error('Unknown word', tokens[0][2]);\n    }\n  }, {\n    key: \"unexpectedClose\",\n    value: function unexpectedClose(token) {\n      throw this.input.error('Unexpected }', token[2]);\n    }\n  }, {\n    key: \"unclosedBlock\",\n    value: function unclosedBlock() {\n      var pos = this.current.source.start;\n      throw this.input.error('Unclosed block', pos.line, pos.column);\n    }\n  }, {\n    key: \"doubleColon\",\n    value: function doubleColon(token) {\n      throw this.input.error('Double colon', token[2]);\n    }\n  }, {\n    key: \"unnamedAtrule\",\n    value: function unnamedAtrule(node, token) {\n      throw this.input.error('At-rule without name', token[2]);\n    }\n  }, {\n    key: \"precheckMissedSemicolon\",\n    value: function\n      /* tokens */\n    precheckMissedSemicolon() {// Hook for Safe Parser\n    }\n  }, {\n    key: \"checkMissedSemicolon\",\n    value: function checkMissedSemicolon(tokens) {\n      var colon = this.colon(tokens);\n      if (colon === false) return;\n      var founded = 0;\n      var token;\n\n      for (var j = colon - 1; j >= 0; j--) {\n        token = tokens[j];\n\n        if (token[0] !== 'space') {\n          founded += 1;\n          if (founded === 2) break;\n        }\n      } // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n      // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n      // And because we need it after that one we do +1 to get the next one.\n\n\n      throw this.input.error('Missed semicolon', token[0] === 'word' ? token[3] + 1 : token[2]);\n    }\n  }]);\n  return Parser;\n}();\n\n$Qa1n$exports = $Qa1n$var$Parser;"},"sourceMaps":null,"error":null,"hash":"12cd170c4df25a53ce04b44fb7e2e98f","cacheData":{"env":{},"imports":{"$require$./declaration":["./declaration","*"],"$require$./tokenize":["./tokenize","*"],"$require$./comment":["./comment","*"],"$require$./at-rule":["./at-rule","*"],"$require$./root":["./root","*"],"$require$./rule":["./rule","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}